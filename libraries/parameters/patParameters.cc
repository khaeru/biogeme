//-*-c++-*------------------------------------------------------------
//
// File name : patParameters.cc
// File automatically generated by ./automaticParser
// Michel Bierlaire, EPFL
// Date :      Sun Aug  3 09:53:14 2008
//
//--------------------------------------------------------------------
//

#include "patParameters.h"
#include "patParserParam.hh"
#include "patVersion.h"

/// Constructor. Provides default values. 
patParameters::patParameters() : 
  outFile("parameters.out"),
  patDirectoryDelimiter('/'),
  BTRMaxGcpIter(10000),
  BTRArmijoBeta1(0.1),
  BTRArmijoBeta2(0.9),
  BTRStartDraws(10),
  BTRIncreaseDraws(2),
  BTREta1(0.01),
  BTREta2(0.9),
  BTRGamma1(0.5),
  BTRGamma2(0.5),
  BTRInitRadius(1.0),
  BTRIncreaseTRRadius(2.0),
  BTRUnfeasibleCGIterations(0),
  BTRForceExactHessianIfMnl(1),
  BTRExactHessian(0),
  BTRCheapHessian(1),
  BTRQuasiNewtonUpdate(1),
  BTRInitQuasiNewtonWithTrueHessian(1),
  BTRInitQuasiNewtonWithBHHH(1),
  BTRMaxIter(1000),
  BTRTypf(1.0),
  BTRTolerance(6.05545e-06),
  BTRMaxTRRadius(1.0e10),
  BTRMinTRRadius(1.0e-7),
  BTRUsePreconditioner(1),
  BTRSingularityThreshold(1.0e-6),
  BTRKappaEpp(0.25),
  BTRKappaLbs(0.9),
  BTRKappaUbs(0.1),
  BTRKappaFrd(0.5),
  BTRSignificantDigits(7),
  CTRAETA0(0.01),
  CTRAETA1(0.01),
  CTRAETA2(0.2),
  CTRAGAMMA1(1.0),
  CTRAGAMMA2(0.5),
  CTRAEPSILONC(0.0),
  CTRAALPHA(0.9),
  CTRAMU(100),
  CTRAMAXNBRFUNCTEVAL(1000),
  CTRAMAXLENGTH(15),
  CTRAMAXDATA(100),
  CTRANBROFBESTPTS(10),
  CTRAPOWER(3.0),
  CTRAMAXRAD(100),
  CTRAMINRAD(1.0e-5),
  CTRAUPPERBOUND(1.0e10),
  CTRALOWERBOUND(-1.0e10),
  CTRAGAMMA3(0.5),
  CTRAGAMMA4(2.0),
  CTRACOEFVALID(2.0),
  CTRACOEFGEN(0.99),
  CTRAEPSERROR(1.0e-8),
  CTRAEPSPOINT(1.0e-8),
  CTRACOEFNORM(1.0e-8),
  CTRAMINSTEP(0.01),
  CTRAMINPIVOTVALUE(1.0e-8),
  CTRAGOODPIVOTVALUE(0.001),
  CTRAFINEPS(0.0001),
  CTRAFINEPSREL(0.01),
  CTRACHECKEPS(1.0e-8),
  CTRACHECKTESTEPS(1.0e-8),
  CTRACHECKTESTEPSREL(0.01),
  CTRAVALMINGAUSS(1.0e-8),
  CTRAFACTOFPOND(1.0e-5),
  Precond(1),
  Epsilon(1.19209e-07),
  CondLimit(5792.62),
  PrecResidu(0.00492157),
  MaxCGIter(150),
  TolSchnabelEskow(0.00492157),
  MaxIter(30),
  InitStep(72.0),
  MinStep(0.0000001),
  MaxEval(100),
  NbrRun(1),
  MaxStep(1.84467e+19),
  AlphaProba(0.1),
  StepReduc(2.0),
  StepIncr(2.0),
  ExpectedImprovement(10.0),
  AllowPremUnsucc(0),
  PrematureStart(0.1),
  PrematureStep(0.1),
  MaxUnsuccIter(5),
  NormWeight(1.0),
  InputDirectory("."),
  OutputDirectory("."),
  TmpDirectory("/home/mbi/tmp"),
  FunctionEvalExec("/home/mbi/programs/pattern/getValue/"),
  jonSimulator("/usr/people40d/crittin/research/Transport/SimpleSimulator"),
  CandidateFile("candidate.dat"),
  ResultFile("result.dat"),
  OutsifFile("OUTSDIF.d"),
  LogFile("iterations.log"),
  ProblemsFile("/home/mbi/programs/pattern/getValue/problems.lis"),
  MITSIMorigin("/home/mbi/mitsim/linktime.dat"),
  MITSIMinformation("/home/mbi/mitsim/petitreseau/linkaccident.dat"),
  MITSIMtravelTime("/home/mbi/mitsim/petitreseau/Output/linktime.out"),
  MITSIMexec("/home/mbi/simlab/bin/linux/mitsim -m /home/mbi/mitsim/petitreseau/master.mitsim >& /dev/null"),
  AugmentationStep(2.0),
  ReductionStep(0.75),
  SubSpaceMaxIter(10),
  SubSpaceConsecutiveFailure(3),
  WarmUpnbre(3),
  gevInputDirectory("."),
  gevOutputDirectory("."),
  gevWorkingDirectory("."),
  gevSignificantDigitsParameters(3),
  gevDecimalDigitsTTest(2),
  gevDecimalDigitsStats(3),
  gevForceScientificNotation(0),
  gevSingularValueThreshold(1.0e-4),
  gevPrintVarCovarAsList(1),
  gevPrintVarCovarAsMatrix(0),
  gevPrintPValue(1),
  gevNumberOfThreads(2),
  gevSaveIntermediateResults(0),
  gevVarCovarFromBHHH(0),
  gevDebugDataFirstRow(0),
  gevDebugDataLastRow(0),
  gevStoreDataOnFile(0),
  gevBinaryDataFile("__BiogemeData.bin"),
  gevDumpDrawsOnFile(0),
  gevReadDrawsFromFile(0),
  gevAntitheticDraws(1),
  gevGenerateActualSample(0),
  gevOutputActualSample("__actualSample.dat"),
  gevNormalDrawsFile("normalDraws.dat"),
  gevRectangularDrawsFile("rectangularDraws.dat"),
  gevRandomDistrib("MLHS"),
  gevMaxPrimeNumber(1000),
  gevWarningSign("*"),
  gevWarningLowDraws(1000),
  gevMissingValue(99999.0),
  gevGenerateFilesForDenis(0),
  gevGenerateGnuplotFile(0),
  gevGeneratePythonFile(0),
  gevPythonFileWithEstimatedParam(1),
  gevFileForDenis("denis.out"),
  gevAutomaticScalingOfLinearUtility(0),
  gevInverseIteration(10),
  gevSeed(9021967),
  gevOne("one"),
  gevMinimumMu(1.0e-5),
  gevSummaryParameters("summary.lis"),
  gevSummaryFile("summary.html"),
  gevStopFileName("STOP"),
  gevCheckDerivatives(0),
  gevBufferSize(100000),
  gevDataFileDisplayStep(500),
  gevTtestThreshold(1.96),
  gevGlobal(1),
  gevAnalGrad(1),
  gevAnalHess(0),
  gevCheapF(0),
  gevFactSec(1),
  gevTermCode(0),
  gevTypx(1),
  gevTypF(1.0),
  gevFDigits(-1),
  gevGradTol(1.0),
  gevMaxStep(5.0),
  gevItnLimit(1000),
  gevDelta(-1.0),
  gevAlgo("BIO"),
  gevScreenPrintLevel(1),
  gevLogFilePrintLevel(2),
  gevGeneratedGroups(3),
  gevGeneratedData(1000),
  gevGeneratedAttr(2),
  gevGeneratedAlt(4),
  gevSubSampleLevel(0),
  gevSubSampleBasis(2),
  gevComputeLastHessian(1),
  gevEigenvalueThreshold(1.0e-6),
  gevNonParamPlotRes(100),
  gevNonParamPlotMaxY(1000.0),
  gevNonParamPlotXSizeCm(15),
  gevNonParamPlotYSizeCm(10),
  gevNonParamPlotMinXSizeCm(0.00001),
  gevNonParamPlotMinYSizeCm(0.00001),
  svdMaxIter(60),
  hieMultinomial(1),
  hieTruncStructUtil(0),
  hieUpdateHessien(1),
  hieDateInLog(1),
  bolducMaxAlts(10),
  bolducMaxFact(20),
  bolducMaxNVar(80),
  StepSecondIndividual(1.0),
  NLgWeight(0.001),
  NLhWeight(0.00001),
  TSFractionGradientRequired(0.1),
  TSExpTheta(0.5),
  cfsqpMode(100),
  cfsqpIprint(2),
  cfsqpMaxIter(1000),
  cfsqpEps(6.05545e-06),
  cfsqpEpsEqn(6.05545e-06),
  cfsqpUdelta(0.0),
  dfoAddToLWRK(0),
  dfoAddToLIWRK(0),
  dfoMaxFunEval(50),
  donlp2Epsx(1.0e-5),
  donlp2Delmin(1.0e-6),
  donlp2Smallw(3.66685e-11),
  donlp2Epsdif(0.0),
  donlp2NReset(9),
  solvoptMaxIter(1000),
  solvoptDisplay(1),
  solvoptErrorArgument(1.0e-4),
  solvoptErrorFunction(1.0e-6)
{
}

patParameters* patParameters::the() {
  static patParameters* singleInstance = NULL;
  if (singleInstance == NULL) {
    singleInstance = new patParameters ;
    assert(singleInstance != NULL) ;
  } 
  return singleInstance ;
}

/// Read the parameter file
void patParameters::readParameterFile(const string& fileName) {
  patParserParam parser(fileName) ;
  parser.parse(this) ;
  
}

void patParameters::generateMinimumParameterFile(const patString& fileName) {
  ofstream theFile(fileName.c_str()) ;
  patAbsTime now ;
  now.setTimeOfDay() ;
  theFile << "// This file has automatically been generated." << endl ;
  theFile << "// " << now.getTimeString(patTsfFULL) << endl ;
  theFile << "// " << patVersion::the()->getCopyright() << endl ;
  theFile << endl ;
  theFile << "// " << patVersion::the()->getVersionInfoDate() << endl ;
  theFile << "// " << patVersion::the()->getVersionInfoAuthor() << endl ;
  theFile << endl ;
  theFile << "[GEV]" << endl ;
  theFile << "gevAlgo = \"" << getgevAlgo() << "\"" << endl ;
  theFile << "gevScreenPrintLevel = " << getgevScreenPrintLevel() << endl ;
  theFile << "gevLogFilePrintLevel = " << getgevLogFilePrintLevel() << endl ;
  theFile << "gevRandomDistrib = \""<< getgevRandomDistrib() << "\"" << endl ;
  theFile << "gevPrintVarCovarAsList = " << getgevPrintVarCovarAsList() << endl ;
  theFile << "gevPrintVarCovarAsMatrix = " << getgevPrintVarCovarAsMatrix() << endl ;
  theFile << "gevPrintPValue  = " << getgevPrintPValue() << endl ;
  theFile << "gevDecimalDigitsStats = " << getgevDecimalDigitsStats() << endl ;
  theFile << "gevSignificantDigitsParameters = " << getgevSignificantDigitsParameters() << endl ;
  theFile << "gevDecimalDigitsTTest  = " << getgevDecimalDigitsTTest() << endl ;
  theFile << "gevNumberOfThreads  = " << getgevNumberOfThreads() << endl ;
  theFile << endl ;
  theFile << "[BasicTrustRegion]" << endl ;
  theFile << "BTRMaxIter = " << getBTRMaxIter() << endl ;
  theFile << endl ;
  theFile << "[cfsqp]" << endl ;
  theFile << "cfsqpMaxIter = " << getcfsqpMaxIter() << endl ;
  theFile << endl ;
  theFile << "[solvopt]" << endl ;
  theFile << "solvoptMaxIter = " << getsolvoptMaxIter() << endl ;
  theFile.close() ;
}

long patParameters::getBTRMaxGcpIter() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRMaxGcpIter = " << BTRMaxGcpIter<< endl ;
	first = patFALSE ;
      }
  return(BTRMaxGcpIter) ;
}

void patParameters::setBTRMaxGcpIter(const long& s) {
  BTRMaxGcpIter = s;
}
float patParameters::getBTRArmijoBeta1() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRArmijoBeta1 = " << BTRArmijoBeta1<< endl ;
	first = patFALSE ;
      }
  return(BTRArmijoBeta1) ;
}

void patParameters::setBTRArmijoBeta1(const float& s) {
  BTRArmijoBeta1 = s;
}
float patParameters::getBTRArmijoBeta2() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRArmijoBeta2 = " << BTRArmijoBeta2<< endl ;
	first = patFALSE ;
      }
  return(BTRArmijoBeta2) ;
}

void patParameters::setBTRArmijoBeta2(const float& s) {
  BTRArmijoBeta2 = s;
}
long patParameters::getBTRStartDraws() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRStartDraws = " << BTRStartDraws<< endl ;
	first = patFALSE ;
      }
  return(BTRStartDraws) ;
}

void patParameters::setBTRStartDraws(const long& s) {
  BTRStartDraws = s;
}
float patParameters::getBTRIncreaseDraws() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRIncreaseDraws = " << BTRIncreaseDraws<< endl ;
	first = patFALSE ;
      }
  return(BTRIncreaseDraws) ;
}

void patParameters::setBTRIncreaseDraws(const float& s) {
  BTRIncreaseDraws = s;
}
float patParameters::getBTREta1() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTREta1 = " << BTREta1<< endl ;
	first = patFALSE ;
      }
  return(BTREta1) ;
}

void patParameters::setBTREta1(const float& s) {
  BTREta1 = s;
}
float patParameters::getBTREta2() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTREta2 = " << BTREta2<< endl ;
	first = patFALSE ;
      }
  return(BTREta2) ;
}

void patParameters::setBTREta2(const float& s) {
  BTREta2 = s;
}
float patParameters::getBTRGamma1() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRGamma1 = " << BTRGamma1<< endl ;
	first = patFALSE ;
      }
  return(BTRGamma1) ;
}

void patParameters::setBTRGamma1(const float& s) {
  BTRGamma1 = s;
}
float patParameters::getBTRGamma2() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRGamma2 = " << BTRGamma2<< endl ;
	first = patFALSE ;
      }
  return(BTRGamma2) ;
}

void patParameters::setBTRGamma2(const float& s) {
  BTRGamma2 = s;
}
float patParameters::getBTRInitRadius() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRInitRadius = " << BTRInitRadius<< endl ;
	first = patFALSE ;
      }
  return(BTRInitRadius) ;
}

void patParameters::setBTRInitRadius(const float& s) {
  BTRInitRadius = s;
}
float patParameters::getBTRIncreaseTRRadius() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRIncreaseTRRadius = " << BTRIncreaseTRRadius<< endl ;
	first = patFALSE ;
      }
  return(BTRIncreaseTRRadius) ;
}

void patParameters::setBTRIncreaseTRRadius(const float& s) {
  BTRIncreaseTRRadius = s;
}
long patParameters::getBTRUnfeasibleCGIterations() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRUnfeasibleCGIterations = " << BTRUnfeasibleCGIterations<< endl ;
	first = patFALSE ;
      }
  return(BTRUnfeasibleCGIterations) ;
}

void patParameters::setBTRUnfeasibleCGIterations(const long& s) {
  BTRUnfeasibleCGIterations = s;
}
long patParameters::getBTRForceExactHessianIfMnl() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRForceExactHessianIfMnl = " << BTRForceExactHessianIfMnl<< endl ;
	first = patFALSE ;
      }
  return(BTRForceExactHessianIfMnl) ;
}

void patParameters::setBTRForceExactHessianIfMnl(const long& s) {
  BTRForceExactHessianIfMnl = s;
}
long patParameters::getBTRExactHessian() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRExactHessian = " << BTRExactHessian<< endl ;
	first = patFALSE ;
      }
  return(BTRExactHessian) ;
}

void patParameters::setBTRExactHessian(const long& s) {
  BTRExactHessian = s;
}
long patParameters::getBTRCheapHessian() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRCheapHessian = " << BTRCheapHessian<< endl ;
	first = patFALSE ;
      }
  return(BTRCheapHessian) ;
}

void patParameters::setBTRCheapHessian(const long& s) {
  BTRCheapHessian = s;
}
long patParameters::getBTRQuasiNewtonUpdate() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRQuasiNewtonUpdate = " << BTRQuasiNewtonUpdate<< endl ;
	first = patFALSE ;
      }
  return(BTRQuasiNewtonUpdate) ;
}

void patParameters::setBTRQuasiNewtonUpdate(const long& s) {
  BTRQuasiNewtonUpdate = s;
}

long patParameters::getBTRInitQuasiNewtonWithTrueHessian() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRInitQuasiNewtonWithTrueHessian = " << BTRInitQuasiNewtonWithTrueHessian<< endl ;
	first = patFALSE ;
      }
  return(BTRInitQuasiNewtonWithTrueHessian) ;
}

void patParameters::setBTRInitQuasiNewtonWithTrueHessian(const long& s) {
  BTRInitQuasiNewtonWithTrueHessian = s;
}

long patParameters::getBTRInitQuasiNewtonWithBHHH() {
      static patBoolean first = patTRUE ;
      if (first) {
	outFile << "BTRInitQuasiNewtonWithBHHH = " << BTRInitQuasiNewtonWithBHHH<< endl ;
	first = patFALSE ;
      }
  return(BTRInitQuasiNewtonWithBHHH) ;
}

void patParameters::setBTRInitQuasiNewtonWithBHHH(const long& s) {
  BTRInitQuasiNewtonWithBHHH = s;
}

long patParameters::getBTRMaxIter() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRMaxIter = " << BTRMaxIter<< endl ;
	first = patFALSE ;
      }
  return(BTRMaxIter) ;
}

void patParameters::setBTRMaxIter(const long& s) {
  BTRMaxIter = s;
}
float patParameters::getBTRTypf() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRTypf = " << BTRTypf<< endl ;
	first = patFALSE ;
      }
  return(BTRTypf) ;
}

void patParameters::setBTRTypf(const float& s) {
  BTRTypf = s;
}
float patParameters::getBTRTolerance() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRTolerance = " << BTRTolerance<< endl ;
	first = patFALSE ;
      }
  return(BTRTolerance) ;
}

void patParameters::setBTRTolerance(const float& s) {
  BTRTolerance = s;
}
float patParameters::getBTRMaxTRRadius() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRMaxTRRadius = " << BTRMaxTRRadius<< endl ;
	first = patFALSE ;
      }
  return(BTRMaxTRRadius) ;
}

void patParameters::setBTRMaxTRRadius(const float& s) {
  BTRMaxTRRadius = s;
}
float patParameters::getBTRMinTRRadius() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRMinTRRadius = " << BTRMinTRRadius<< endl ;
	first = patFALSE ;
      }
  return(BTRMinTRRadius) ;
}

void patParameters::setBTRMinTRRadius(const float& s) {
  BTRMinTRRadius = s;
}
long patParameters::getBTRUsePreconditioner() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRUsePreconditioner = " << BTRUsePreconditioner<< endl ;
	first = patFALSE ;
      }
  return(BTRUsePreconditioner) ;
}

void patParameters::setBTRUsePreconditioner(const long& s) {
  BTRUsePreconditioner = s;
}
float patParameters::getBTRSingularityThreshold() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRSingularityThreshold = " << BTRSingularityThreshold<< endl ;
	first = patFALSE ;
      }
  return(BTRSingularityThreshold) ;
}

void patParameters::setBTRSingularityThreshold(const float& s) {
  BTRSingularityThreshold = s;
}
float patParameters::getBTRKappaEpp() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRKappaEpp = " << BTRKappaEpp<< endl ;
	first = patFALSE ;
      }
  return(BTRKappaEpp) ;
}

void patParameters::setBTRKappaEpp(const float& s) {
  BTRKappaEpp = s;
}
float patParameters::getBTRKappaLbs() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRKappaLbs = " << BTRKappaLbs<< endl ;
	first = patFALSE ;
      }
  return(BTRKappaLbs) ;
}

void patParameters::setBTRKappaLbs(const float& s) {
  BTRKappaLbs = s;
}
float patParameters::getBTRKappaUbs() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRKappaUbs = " << BTRKappaUbs<< endl ;
	first = patFALSE ;
      }
  return(BTRKappaUbs) ;
}

void patParameters::setBTRKappaUbs(const float& s) {
  BTRKappaUbs = s;
}
float patParameters::getBTRKappaFrd() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRKappaFrd = " << BTRKappaFrd<< endl ;
	first = patFALSE ;
      }
  return(BTRKappaFrd) ;
}

void patParameters::setBTRKappaFrd(const float& s) {
  BTRKappaFrd = s;
}
long patParameters::getBTRSignificantDigits() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "BTRSignificantDigits = " << BTRSignificantDigits<< endl ;
	first = patFALSE ;
      }
  return(BTRSignificantDigits) ;
}

void patParameters::setBTRSignificantDigits(const long& s) {
  BTRSignificantDigits = s;
}
float patParameters::getCTRAETA0() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAETA0 = " << CTRAETA0<< endl ;
	first = patFALSE ;
      }
  return(CTRAETA0) ;
}

void patParameters::setCTRAETA0(const float& s) {
  CTRAETA0 = s;
}
float patParameters::getCTRAETA1() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAETA1 = " << CTRAETA1<< endl ;
	first = patFALSE ;
      }
  return(CTRAETA1) ;
}

void patParameters::setCTRAETA1(const float& s) {
  CTRAETA1 = s;
}
float patParameters::getCTRAETA2() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAETA2 = " << CTRAETA2<< endl ;
	first = patFALSE ;
      }
  return(CTRAETA2) ;
}

void patParameters::setCTRAETA2(const float& s) {
  CTRAETA2 = s;
}
float patParameters::getCTRAGAMMA1() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAGAMMA1 = " << CTRAGAMMA1<< endl ;
	first = patFALSE ;
      }
  return(CTRAGAMMA1) ;
}

void patParameters::setCTRAGAMMA1(const float& s) {
  CTRAGAMMA1 = s;
}
float patParameters::getCTRAGAMMA2() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAGAMMA2 = " << CTRAGAMMA2<< endl ;
	first = patFALSE ;
      }
  return(CTRAGAMMA2) ;
}

void patParameters::setCTRAGAMMA2(const float& s) {
  CTRAGAMMA2 = s;
}
float patParameters::getCTRAEPSILONC() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAEPSILONC = " << CTRAEPSILONC<< endl ;
	first = patFALSE ;
      }
  return(CTRAEPSILONC) ;
}

void patParameters::setCTRAEPSILONC(const float& s) {
  CTRAEPSILONC = s;
}
float patParameters::getCTRAALPHA() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAALPHA = " << CTRAALPHA<< endl ;
	first = patFALSE ;
      }
  return(CTRAALPHA) ;
}

void patParameters::setCTRAALPHA(const float& s) {
  CTRAALPHA = s;
}
long patParameters::getCTRAMU() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAMU = " << CTRAMU<< endl ;
	first = patFALSE ;
      }
  return(CTRAMU) ;
}

void patParameters::setCTRAMU(const long& s) {
  CTRAMU = s;
}
long patParameters::getCTRAMAXNBRFUNCTEVAL() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAMAXNBRFUNCTEVAL = " << CTRAMAXNBRFUNCTEVAL<< endl ;
	first = patFALSE ;
      }
  return(CTRAMAXNBRFUNCTEVAL) ;
}

void patParameters::setCTRAMAXNBRFUNCTEVAL(const long& s) {
  CTRAMAXNBRFUNCTEVAL = s;
}
long patParameters::getCTRAMAXLENGTH() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAMAXLENGTH = " << CTRAMAXLENGTH<< endl ;
	first = patFALSE ;
      }
  return(CTRAMAXLENGTH) ;
}

void patParameters::setCTRAMAXLENGTH(const long& s) {
  CTRAMAXLENGTH = s;
}
long patParameters::getCTRAMAXDATA() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAMAXDATA = " << CTRAMAXDATA<< endl ;
	first = patFALSE ;
      }
  return(CTRAMAXDATA) ;
}

void patParameters::setCTRAMAXDATA(const long& s) {
  CTRAMAXDATA = s;
}
long patParameters::getCTRANBROFBESTPTS() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRANBROFBESTPTS = " << CTRANBROFBESTPTS<< endl ;
	first = patFALSE ;
      }
  return(CTRANBROFBESTPTS) ;
}

void patParameters::setCTRANBROFBESTPTS(const long& s) {
  CTRANBROFBESTPTS = s;
}
float patParameters::getCTRAPOWER() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAPOWER = " << CTRAPOWER<< endl ;
	first = patFALSE ;
      }
  return(CTRAPOWER) ;
}

void patParameters::setCTRAPOWER(const float& s) {
  CTRAPOWER = s;
}
long patParameters::getCTRAMAXRAD() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAMAXRAD = " << CTRAMAXRAD<< endl ;
	first = patFALSE ;
      }
  return(CTRAMAXRAD) ;
}

void patParameters::setCTRAMAXRAD(const long& s) {
  CTRAMAXRAD = s;
}
float patParameters::getCTRAMINRAD() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAMINRAD = " << CTRAMINRAD<< endl ;
	first = patFALSE ;
      }
  return(CTRAMINRAD) ;
}

void patParameters::setCTRAMINRAD(const float& s) {
  CTRAMINRAD = s;
}
float patParameters::getCTRAUPPERBOUND() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAUPPERBOUND = " << CTRAUPPERBOUND<< endl ;
	first = patFALSE ;
      }
  return(CTRAUPPERBOUND) ;
}

void patParameters::setCTRAUPPERBOUND(const float& s) {
  CTRAUPPERBOUND = s;
}
float patParameters::getCTRALOWERBOUND() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRALOWERBOUND = " << CTRALOWERBOUND<< endl ;
	first = patFALSE ;
      }
  return(CTRALOWERBOUND) ;
}

void patParameters::setCTRALOWERBOUND(const float& s) {
  CTRALOWERBOUND = s;
}
float patParameters::getCTRAGAMMA3() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAGAMMA3 = " << CTRAGAMMA3<< endl ;
	first = patFALSE ;
      }
  return(CTRAGAMMA3) ;
}

void patParameters::setCTRAGAMMA3(const float& s) {
  CTRAGAMMA3 = s;
}
float patParameters::getCTRAGAMMA4() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAGAMMA4 = " << CTRAGAMMA4<< endl ;
	first = patFALSE ;
      }
  return(CTRAGAMMA4) ;
}

void patParameters::setCTRAGAMMA4(const float& s) {
  CTRAGAMMA4 = s;
}
float patParameters::getCTRACOEFVALID() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRACOEFVALID = " << CTRACOEFVALID<< endl ;
	first = patFALSE ;
      }
  return(CTRACOEFVALID) ;
}

void patParameters::setCTRACOEFVALID(const float& s) {
  CTRACOEFVALID = s;
}
float patParameters::getCTRACOEFGEN() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRACOEFGEN = " << CTRACOEFGEN<< endl ;
	first = patFALSE ;
      }
  return(CTRACOEFGEN) ;
}

void patParameters::setCTRACOEFGEN(const float& s) {
  CTRACOEFGEN = s;
}
float patParameters::getCTRAEPSERROR() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAEPSERROR = " << CTRAEPSERROR<< endl ;
	first = patFALSE ;
      }
  return(CTRAEPSERROR) ;
}

void patParameters::setCTRAEPSERROR(const float& s) {
  CTRAEPSERROR = s;
}
float patParameters::getCTRAEPSPOINT() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAEPSPOINT = " << CTRAEPSPOINT<< endl ;
	first = patFALSE ;
      }
  return(CTRAEPSPOINT) ;
}

void patParameters::setCTRAEPSPOINT(const float& s) {
  CTRAEPSPOINT = s;
}
float patParameters::getCTRACOEFNORM() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRACOEFNORM = " << CTRACOEFNORM<< endl ;
	first = patFALSE ;
      }
  return(CTRACOEFNORM) ;
}

void patParameters::setCTRACOEFNORM(const float& s) {
  CTRACOEFNORM = s;
}
float patParameters::getCTRAMINSTEP() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAMINSTEP = " << CTRAMINSTEP<< endl ;
	first = patFALSE ;
      }
  return(CTRAMINSTEP) ;
}

void patParameters::setCTRAMINSTEP(const float& s) {
  CTRAMINSTEP = s;
}
float patParameters::getCTRAMINPIVOTVALUE() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAMINPIVOTVALUE = " << CTRAMINPIVOTVALUE<< endl ;
	first = patFALSE ;
      }
  return(CTRAMINPIVOTVALUE) ;
}

void patParameters::setCTRAMINPIVOTVALUE(const float& s) {
  CTRAMINPIVOTVALUE = s;
}
float patParameters::getCTRAGOODPIVOTVALUE() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAGOODPIVOTVALUE = " << CTRAGOODPIVOTVALUE<< endl ;
	first = patFALSE ;
      }
  return(CTRAGOODPIVOTVALUE) ;
}

void patParameters::setCTRAGOODPIVOTVALUE(const float& s) {
  CTRAGOODPIVOTVALUE = s;
}
float patParameters::getCTRAFINEPS() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAFINEPS = " << CTRAFINEPS<< endl ;
	first = patFALSE ;
      }
  return(CTRAFINEPS) ;
}

void patParameters::setCTRAFINEPS(const float& s) {
  CTRAFINEPS = s;
}
float patParameters::getCTRAFINEPSREL() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAFINEPSREL = " << CTRAFINEPSREL<< endl ;
	first = patFALSE ;
      }
  return(CTRAFINEPSREL) ;
}

void patParameters::setCTRAFINEPSREL(const float& s) {
  CTRAFINEPSREL = s;
}
float patParameters::getCTRACHECKEPS() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRACHECKEPS = " << CTRACHECKEPS<< endl ;
	first = patFALSE ;
      }
  return(CTRACHECKEPS) ;
}

void patParameters::setCTRACHECKEPS(const float& s) {
  CTRACHECKEPS = s;
}
float patParameters::getCTRACHECKTESTEPS() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRACHECKTESTEPS = " << CTRACHECKTESTEPS<< endl ;
	first = patFALSE ;
      }
  return(CTRACHECKTESTEPS) ;
}

void patParameters::setCTRACHECKTESTEPS(const float& s) {
  CTRACHECKTESTEPS = s;
}
float patParameters::getCTRACHECKTESTEPSREL() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRACHECKTESTEPSREL = " << CTRACHECKTESTEPSREL<< endl ;
	first = patFALSE ;
      }
  return(CTRACHECKTESTEPSREL) ;
}

void patParameters::setCTRACHECKTESTEPSREL(const float& s) {
  CTRACHECKTESTEPSREL = s;
}
float patParameters::getCTRAVALMINGAUSS() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAVALMINGAUSS = " << CTRAVALMINGAUSS<< endl ;
	first = patFALSE ;
      }
  return(CTRAVALMINGAUSS) ;
}

void patParameters::setCTRAVALMINGAUSS(const float& s) {
  CTRAVALMINGAUSS = s;
}
float patParameters::getCTRAFACTOFPOND() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CTRAFACTOFPOND = " << CTRAFACTOFPOND<< endl ;
	first = patFALSE ;
      }
  return(CTRAFACTOFPOND) ;
}

void patParameters::setCTRAFACTOFPOND(const float& s) {
  CTRAFACTOFPOND = s;
}
long patParameters::getPrecond() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "Precond = " << Precond<< endl ;
	first = patFALSE ;
      }
  return(Precond) ;
}

void patParameters::setPrecond(const long& s) {
  Precond = s;
}
float patParameters::getEpsilon() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "Epsilon = " << Epsilon<< endl ;
	first = patFALSE ;
      }
  return(Epsilon) ;
}

void patParameters::setEpsilon(const float& s) {
  Epsilon = s;
}
float patParameters::getCondLimit() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CondLimit = " << CondLimit<< endl ;
	first = patFALSE ;
      }
  return(CondLimit) ;
}

void patParameters::setCondLimit(const float& s) {
  CondLimit = s;
}
float patParameters::getPrecResidu() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "PrecResidu = " << PrecResidu<< endl ;
	first = patFALSE ;
      }
  return(PrecResidu) ;
}

void patParameters::setPrecResidu(const float& s) {
  PrecResidu = s;
}
long patParameters::getMaxCGIter() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MaxCGIter = " << MaxCGIter<< endl ;
	first = patFALSE ;
      }
  return(MaxCGIter) ;
}

void patParameters::setMaxCGIter(const long& s) {
  MaxCGIter = s;
}
float patParameters::getTolSchnabelEskow() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "TolSchnabelEskow = " << TolSchnabelEskow<< endl ;
	first = patFALSE ;
      }
  return(TolSchnabelEskow) ;
}

void patParameters::setTolSchnabelEskow(const float& s) {
  TolSchnabelEskow = s;
}
long patParameters::getMaxIter() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MaxIter = " << MaxIter<< endl ;
	first = patFALSE ;
      }
  return(MaxIter) ;
}

void patParameters::setMaxIter(const long& s) {
  MaxIter = s;
}
float patParameters::getInitStep() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "InitStep = " << InitStep<< endl ;
	first = patFALSE ;
      }
  return(InitStep) ;
}

void patParameters::setInitStep(const float& s) {
  InitStep = s;
}
float patParameters::getMinStep() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MinStep = " << MinStep<< endl ;
	first = patFALSE ;
      }
  return(MinStep) ;
}

void patParameters::setMinStep(const float& s) {
  MinStep = s;
}
long patParameters::getMaxEval() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MaxEval = " << MaxEval<< endl ;
	first = patFALSE ;
      }
  return(MaxEval) ;
}

void patParameters::setMaxEval(const long& s) {
  MaxEval = s;
}
long patParameters::getNbrRun() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "NbrRun = " << NbrRun<< endl ;
	first = patFALSE ;
      }
  return(NbrRun) ;
}

void patParameters::setNbrRun(const long& s) {
  NbrRun = s;
}
float patParameters::getMaxStep() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MaxStep = " << MaxStep<< endl ;
	first = patFALSE ;
      }
  return(MaxStep) ;
}

void patParameters::setMaxStep(const float& s) {
  MaxStep = s;
}
float patParameters::getAlphaProba() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "AlphaProba = " << AlphaProba<< endl ;
	first = patFALSE ;
      }
  return(AlphaProba) ;
}

void patParameters::setAlphaProba(const float& s) {
  AlphaProba = s;
}
float patParameters::getStepReduc() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "StepReduc = " << StepReduc<< endl ;
	first = patFALSE ;
      }
  return(StepReduc) ;
}

void patParameters::setStepReduc(const float& s) {
  StepReduc = s;
}
float patParameters::getStepIncr() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "StepIncr = " << StepIncr<< endl ;
	first = patFALSE ;
      }
  return(StepIncr) ;
}

void patParameters::setStepIncr(const float& s) {
  StepIncr = s;
}
float patParameters::getExpectedImprovement() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "ExpectedImprovement = " << ExpectedImprovement<< endl ;
	first = patFALSE ;
      }
  return(ExpectedImprovement) ;
}

void patParameters::setExpectedImprovement(const float& s) {
  ExpectedImprovement = s;
}
long patParameters::getAllowPremUnsucc() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "AllowPremUnsucc = " << AllowPremUnsucc<< endl ;
	first = patFALSE ;
      }
  return(AllowPremUnsucc) ;
}

void patParameters::setAllowPremUnsucc(const long& s) {
  AllowPremUnsucc = s;
}
float patParameters::getPrematureStart() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "PrematureStart = " << PrematureStart<< endl ;
	first = patFALSE ;
      }
  return(PrematureStart) ;
}

void patParameters::setPrematureStart(const float& s) {
  PrematureStart = s;
}
float patParameters::getPrematureStep() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "PrematureStep = " << PrematureStep<< endl ;
	first = patFALSE ;
      }
  return(PrematureStep) ;
}

void patParameters::setPrematureStep(const float& s) {
  PrematureStep = s;
}
long patParameters::getMaxUnsuccIter() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MaxUnsuccIter = " << MaxUnsuccIter<< endl ;
	first = patFALSE ;
      }
  return(MaxUnsuccIter) ;
}

void patParameters::setMaxUnsuccIter(const long& s) {
  MaxUnsuccIter = s;
}
float patParameters::getNormWeight() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "NormWeight = " << NormWeight<< endl ;
	first = patFALSE ;
      }
  return(NormWeight) ;
}

void patParameters::setNormWeight(const float& s) {
  NormWeight = s;
}
string patParameters::getInputDirectory() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "InputDirectory = " << InputDirectory<< endl ;
	first = patFALSE ;
      }
  return(InputDirectory) ;
}

void patParameters::setInputDirectory(const string& s) {
  InputDirectory = s;
}
string patParameters::getOutputDirectory() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "OutputDirectory = " << OutputDirectory<< endl ;
	first = patFALSE ;
      }
  return(OutputDirectory) ;
}

void patParameters::setOutputDirectory(const string& s) {
  OutputDirectory = s;
}
string patParameters::getTmpDirectory() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "TmpDirectory = " << TmpDirectory<< endl ;
	first = patFALSE ;
      }
  return(TmpDirectory) ;
}

void patParameters::setTmpDirectory(const string& s) {
  TmpDirectory = s;
}
string patParameters::getFunctionEvalExec() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "FunctionEvalExec = " << FunctionEvalExec<< endl ;
	first = patFALSE ;
      }
  return(FunctionEvalExec) ;
}

void patParameters::setFunctionEvalExec(const string& s) {
  FunctionEvalExec = s;
}
string patParameters::getjonSimulator() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "jonSimulator = " << jonSimulator<< endl ;
	first = patFALSE ;
      }
  return(jonSimulator) ;
}

void patParameters::setjonSimulator(const string& s) {
  jonSimulator = s;
}
string patParameters::getCandidateFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "CandidateFile = " << CandidateFile<< endl ;
	first = patFALSE ;
      }
  return(CandidateFile) ;
}

void patParameters::setCandidateFile(const string& s) {
  CandidateFile = s;
}
string patParameters::getResultFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "ResultFile = " << ResultFile<< endl ;
	first = patFALSE ;
      }
  return(ResultFile) ;
}

void patParameters::setResultFile(const string& s) {
  ResultFile = s;
}
string patParameters::getOutsifFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "OutsifFile = " << OutsifFile<< endl ;
	first = patFALSE ;
      }
  return(OutsifFile) ;
}

void patParameters::setOutsifFile(const string& s) {
  OutsifFile = s;
}
string patParameters::getLogFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "LogFile = " << LogFile<< endl ;
	first = patFALSE ;
      }
  return(LogFile) ;
}

void patParameters::setLogFile(const string& s) {
  LogFile = s;
}
string patParameters::getProblemsFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "ProblemsFile = " << ProblemsFile<< endl ;
	first = patFALSE ;
      }
  return(ProblemsFile) ;
}

void patParameters::setProblemsFile(const string& s) {
  ProblemsFile = s;
}
string patParameters::getMITSIMorigin() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MITSIMorigin = " << MITSIMorigin<< endl ;
	first = patFALSE ;
      }
  return(MITSIMorigin) ;
}

void patParameters::setMITSIMorigin(const string& s) {
  MITSIMorigin = s;
}
string patParameters::getMITSIMinformation() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MITSIMinformation = " << MITSIMinformation<< endl ;
	first = patFALSE ;
      }
  return(MITSIMinformation) ;
}

void patParameters::setMITSIMinformation(const string& s) {
  MITSIMinformation = s;
}
string patParameters::getMITSIMtravelTime() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MITSIMtravelTime = " << MITSIMtravelTime<< endl ;
	first = patFALSE ;
      }
  return(MITSIMtravelTime) ;
}

void patParameters::setMITSIMtravelTime(const string& s) {
  MITSIMtravelTime = s;
}
string patParameters::getMITSIMexec() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "MITSIMexec = " << MITSIMexec<< endl ;
	first = patFALSE ;
      }
  return(MITSIMexec) ;
}

void patParameters::setMITSIMexec(const string& s) {
  MITSIMexec = s;
}
float patParameters::getAugmentationStep() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "AugmentationStep = " << AugmentationStep<< endl ;
	first = patFALSE ;
      }
  return(AugmentationStep) ;
}

void patParameters::setAugmentationStep(const float& s) {
  AugmentationStep = s;
}
float patParameters::getReductionStep() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "ReductionStep = " << ReductionStep<< endl ;
	first = patFALSE ;
      }
  return(ReductionStep) ;
}

void patParameters::setReductionStep(const float& s) {
  ReductionStep = s;
}
long patParameters::getSubSpaceMaxIter() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "SubSpaceMaxIter = " << SubSpaceMaxIter<< endl ;
	first = patFALSE ;
      }
  return(SubSpaceMaxIter) ;
}

void patParameters::setSubSpaceMaxIter(const long& s) {
  SubSpaceMaxIter = s;
}
long patParameters::getSubSpaceConsecutiveFailure() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "SubSpaceConsecutiveFailure = " << SubSpaceConsecutiveFailure<< endl ;
	first = patFALSE ;
      }
  return(SubSpaceConsecutiveFailure) ;
}

void patParameters::setSubSpaceConsecutiveFailure(const long& s) {
  SubSpaceConsecutiveFailure = s;
}
long patParameters::getWarmUpnbre() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "WarmUpnbre = " << WarmUpnbre<< endl ;
	first = patFALSE ;
      }
  return(WarmUpnbre) ;
}

void patParameters::setWarmUpnbre(const long& s) {
  WarmUpnbre = s;
}
string patParameters::getgevInputDirectory() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevInputDirectory = " << gevInputDirectory<< endl ;
	first = patFALSE ;
      }
  return(gevInputDirectory) ;
}

void patParameters::setgevInputDirectory(const string& s) {
  gevInputDirectory = s;
}
string patParameters::getgevOutputDirectory() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevOutputDirectory = " << gevOutputDirectory<< endl ;
	first = patFALSE ;
      }
  return(gevOutputDirectory) ;
}

void patParameters::setgevOutputDirectory(const string& s) {
  gevOutputDirectory = s;
}
string patParameters::getgevWorkingDirectory() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevWorkingDirectory = " << gevWorkingDirectory<< endl ;
	first = patFALSE ;
      }
  return(gevWorkingDirectory) ;
}

void patParameters::setgevWorkingDirectory(const string& s) {
  gevWorkingDirectory = s;
}
long patParameters::getgevSignificantDigitsParameters() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevSignificantDigitsParameters = " << gevSignificantDigitsParameters<< endl ;
	first = patFALSE ;
      }
  return(gevSignificantDigitsParameters) ;
}

void patParameters::setgevSignificantDigitsParameters(const long& s) {
  gevSignificantDigitsParameters = s;
}
long patParameters::getgevDecimalDigitsTTest() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevDecimalDigitsTTest = " << gevDecimalDigitsTTest<< endl ;
	first = patFALSE ;
      }
  return(gevDecimalDigitsTTest) ;
}

void patParameters::setgevDecimalDigitsTTest(const long& s) {
  gevDecimalDigitsTTest = s;
}
long patParameters::getgevDecimalDigitsStats() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevDecimalDigitsStats = " << gevDecimalDigitsStats<< endl ;
	first = patFALSE ;
      }
  return(gevDecimalDigitsStats) ;
}

void patParameters::setgevDecimalDigitsStats(const long& s) {
  gevDecimalDigitsStats = s;
}
long patParameters::getgevForceScientificNotation() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevForceScientificNotation = " << gevForceScientificNotation<< endl ;
	first = patFALSE ;
      }
  return(gevForceScientificNotation) ;
}

void patParameters::setgevForceScientificNotation(const long& s) {
  gevForceScientificNotation = s;
}
float patParameters::getgevSingularValueThreshold() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevSingularValueThreshold = " << gevSingularValueThreshold<< endl ;
	first = patFALSE ;
      }
  return(gevSingularValueThreshold) ;
}

void patParameters::setgevSingularValueThreshold(const float& s) {
  gevSingularValueThreshold = s;
}
long patParameters::getgevPrintVarCovarAsList() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevPrintVarCovarAsList = " << gevPrintVarCovarAsList<< endl ;
	first = patFALSE ;
      }
  return(gevPrintVarCovarAsList) ;
}

void patParameters::setgevPrintVarCovarAsList(const long& s) {
  gevPrintVarCovarAsList = s;
}
long patParameters::getgevPrintVarCovarAsMatrix() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevPrintVarCovarAsMatrix = " << gevPrintVarCovarAsMatrix<< endl ;
	first = patFALSE ;
      }
  return(gevPrintVarCovarAsMatrix) ;
}

void patParameters::setgevPrintVarCovarAsMatrix(const long& s) {
  gevPrintVarCovarAsMatrix = s;
}
long patParameters::getgevPrintPValue() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevPrintPValue = " << gevPrintPValue<< endl ;
	first = patFALSE ;
      }
  return(gevPrintPValue) ;
}

void patParameters::setgevPrintPValue(const long& s) {
  gevPrintPValue = s;
}
long patParameters::getgevNumberOfThreads() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevNumberOfThreads = " << gevNumberOfThreads<< endl ;
	first = patFALSE ;
      }
  return(gevNumberOfThreads) ;
}

void patParameters::setgevNumberOfThreads(const long& s) {
  gevNumberOfThreads = s;
}
long patParameters::getgevSaveIntermediateResults() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevSaveIntermediateResults = " << gevSaveIntermediateResults<< endl ;
	first = patFALSE ;
      }
  return(gevSaveIntermediateResults) ;
}

void patParameters::setgevSaveIntermediateResults(const long& s) {
  gevSaveIntermediateResults = s;
}
long patParameters::getgevVarCovarFromBHHH() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevVarCovarFromBHHH = " << gevVarCovarFromBHHH<< endl ;
	first = patFALSE ;
      }
  return(gevVarCovarFromBHHH) ;
}

void patParameters::setgevVarCovarFromBHHH(const long& s) {
  gevVarCovarFromBHHH = s;
}
long patParameters::getgevDebugDataFirstRow() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevDebugDataFirstRow = " << gevDebugDataFirstRow<< endl ;
	first = patFALSE ;
      }
  return(gevDebugDataFirstRow) ;
}

void patParameters::setgevDebugDataFirstRow(const long& s) {
  gevDebugDataFirstRow = s;
}
long patParameters::getgevDebugDataLastRow() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevDebugDataLastRow = " << gevDebugDataLastRow<< endl ;
	first = patFALSE ;
      }
  return(gevDebugDataLastRow) ;
}

void patParameters::setgevDebugDataLastRow(const long& s) {
  gevDebugDataLastRow = s;
}
long patParameters::getgevStoreDataOnFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevStoreDataOnFile = " << gevStoreDataOnFile<< endl ;
	first = patFALSE ;
      }
  return(gevStoreDataOnFile) ;
}

void patParameters::setgevStoreDataOnFile(const long& s) {
  gevStoreDataOnFile = s;
}
string patParameters::getgevBinaryDataFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevBinaryDataFile = " << gevBinaryDataFile<< endl ;
	first = patFALSE ;
      }
  return(gevBinaryDataFile) ;
}

void patParameters::setgevBinaryDataFile(const string& s) {
  gevBinaryDataFile = s;
}
long patParameters::getgevDumpDrawsOnFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevDumpDrawsOnFile = " << gevDumpDrawsOnFile<< endl ;
	first = patFALSE ;
      }
  return(gevDumpDrawsOnFile) ;
}

void patParameters::setgevDumpDrawsOnFile(const long& s) {
  gevDumpDrawsOnFile = s;
}
long patParameters::getgevReadDrawsFromFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevReadDrawsFromFile = " << gevReadDrawsFromFile<< endl ;
	first = patFALSE ;
      }
  return(gevReadDrawsFromFile) ;
}

void patParameters::setgevReadDrawsFromFile(const long& s) {
  gevReadDrawsFromFile = s;
}

long patParameters::getgevAntitheticDraws() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevAntitheticDraws = " << gevAntitheticDraws<< endl ;
	first = patFALSE ;
      }
  return(gevAntitheticDraws) ;
}

void patParameters::setgevAntitheticDraws(const long& s) {
  gevAntitheticDraws = s;
}


long patParameters::getgevGenerateActualSample() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGenerateActualSample = " << gevGenerateActualSample<< endl ;
	first = patFALSE ;
      }
  return(gevGenerateActualSample) ;
}

void patParameters::setgevGenerateActualSample(const long& s) {
  gevGenerateActualSample = s;
}
string patParameters::getgevOutputActualSample() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevOutputActualSample = " << gevOutputActualSample<< endl ;
	first = patFALSE ;
      }
  return(gevOutputActualSample) ;
}

void patParameters::setgevOutputActualSample(const string& s) {
  gevOutputActualSample = s;
}
string patParameters::getgevNormalDrawsFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevNormalDrawsFile = " << gevNormalDrawsFile<< endl ;
	first = patFALSE ;
      }
  return(gevNormalDrawsFile) ;
}

void patParameters::setgevNormalDrawsFile(const string& s) {
  gevNormalDrawsFile = s;
}
string patParameters::getgevRectangularDrawsFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevRectangularDrawsFile = " << gevRectangularDrawsFile<< endl ;
	first = patFALSE ;
      }
  return(gevRectangularDrawsFile) ;
}

void patParameters::setgevRectangularDrawsFile(const string& s) {
  gevRectangularDrawsFile = s;
}
string patParameters::getgevRandomDistrib() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevRandomDistrib = " << gevRandomDistrib<< endl ;
	first = patFALSE ;
      }
  return(gevRandomDistrib) ;
}

void patParameters::setgevRandomDistrib(const string& s) {
  gevRandomDistrib = s;
}
long patParameters::getgevMaxPrimeNumber() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevMaxPrimeNumber = " << gevMaxPrimeNumber<< endl ;
	first = patFALSE ;
      }
  return(gevMaxPrimeNumber) ;
}

void patParameters::setgevMaxPrimeNumber(const long& s) {
  gevMaxPrimeNumber = s;
}
string patParameters::getgevWarningSign() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevWarningSign = " << gevWarningSign<< endl ;
	first = patFALSE ;
      }
  return(gevWarningSign) ;
}

void patParameters::setgevWarningSign(const string& s) {
  gevWarningSign = s;
}
long patParameters::getgevWarningLowDraws() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevWarningLowDraws = " << gevWarningLowDraws<< endl ;
	first = patFALSE ;
      }
  return(gevWarningLowDraws) ;
}

void patParameters::setgevWarningLowDraws(const long& s) {
  gevWarningLowDraws = s;
}
float patParameters::getgevMissingValue() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevMissingValue = " << gevMissingValue<< endl ;
	first = patFALSE ;
      }
  return(gevMissingValue) ;
}

void patParameters::setgevMissingValue(const float& s) {
  gevMissingValue = s;
}
long patParameters::getgevGenerateFilesForDenis() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGenerateFilesForDenis = " << gevGenerateFilesForDenis<< endl ;
	first = patFALSE ;
      }
  return(gevGenerateFilesForDenis) ;
}

void patParameters::setgevGenerateFilesForDenis(const long& s) {
  gevGenerateFilesForDenis = s;
}
long patParameters::getgevGenerateGnuplotFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGenerateGnuplotFile = " << gevGenerateGnuplotFile<< endl ;
	first = patFALSE ;
      }
  return(gevGenerateGnuplotFile) ;
}

void patParameters::setgevGenerateGnuplotFile(const long& s) {
  gevGenerateGnuplotFile = s;
}

long patParameters::getgevGeneratePythonFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGeneratePythonFile = " << gevGeneratePythonFile<< endl ;
	first = patFALSE ;
      }
  return(gevGeneratePythonFile) ;
}

void patParameters::setgevGeneratePythonFile(const long& s) {
  gevGeneratePythonFile = s;
}

long patParameters::getgevPythonFileWithEstimatedParam() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevPythonFileWithEstimatedParam = " << gevPythonFileWithEstimatedParam<< endl ;
	first = patFALSE ;
      }
  return(gevPythonFileWithEstimatedParam) ;
}

void patParameters::setgevPythonFileWithEstimatedParam(const long& s) {
  gevPythonFileWithEstimatedParam = s;
}

string patParameters::getgevFileForDenis() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevFileForDenis = " << gevFileForDenis<< endl ;
	first = patFALSE ;
      }
  return(gevFileForDenis) ;
}

void patParameters::setgevFileForDenis(const string& s) {
  gevFileForDenis = s;
}
long patParameters::getgevAutomaticScalingOfLinearUtility() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevAutomaticScalingOfLinearUtility = " << gevAutomaticScalingOfLinearUtility<< endl ;
	first = patFALSE ;
      }
  return(gevAutomaticScalingOfLinearUtility) ;
}

void patParameters::setgevAutomaticScalingOfLinearUtility(const long& s) {
  gevAutomaticScalingOfLinearUtility = s;
}
long patParameters::getgevInverseIteration() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevInverseIteration = " << gevInverseIteration<< endl ;
	first = patFALSE ;
      }
  return(gevInverseIteration) ;
}

void patParameters::setgevInverseIteration(const long& s) {
  gevInverseIteration = s;
}
long patParameters::getgevSeed() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevSeed = " << gevSeed<< endl ;
	first = patFALSE ;
      }
  return(gevSeed) ;
}

void patParameters::setgevSeed(const long& s) {
  gevSeed = s;
}
string patParameters::getgevOne() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevOne = " << gevOne<< endl ;
	first = patFALSE ;
      }
  return(gevOne) ;
}

void patParameters::setgevOne(const string& s) {
  gevOne = s;
}
float patParameters::getgevMinimumMu() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevMinimumMu = " << gevMinimumMu<< endl ;
	first = patFALSE ;
      }
  return(gevMinimumMu) ;
}

void patParameters::setgevMinimumMu(const float& s) {
  gevMinimumMu = s;
}
string patParameters::getgevSummaryParameters() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevSummaryParameters = " << gevSummaryParameters<< endl ;
	first = patFALSE ;
      }
  return(gevSummaryParameters) ;
}

void patParameters::setgevSummaryParameters(const string& s) {
  gevSummaryParameters = s;
}
string patParameters::getgevSummaryFile() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevSummaryFile = " << gevSummaryFile<< endl ;
	first = patFALSE ;
      }
  return(gevSummaryFile) ;
}

void patParameters::setgevSummaryFile(const string& s) {
  gevSummaryFile = s;
}
string patParameters::getgevStopFileName() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevStopFileName = " << gevStopFileName<< endl ;
	first = patFALSE ;
      }
  return(gevStopFileName) ;
}

void patParameters::setgevStopFileName(const string& s) {
  gevStopFileName = s;
}
long patParameters::getgevCheckDerivatives() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevCheckDerivatives = " << gevCheckDerivatives<< endl ;
	first = patFALSE ;
      }
  return(gevCheckDerivatives) ;
}

void patParameters::setgevCheckDerivatives(const long& s) {
  gevCheckDerivatives = s;
}
long patParameters::getgevBufferSize() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevBufferSize = " << gevBufferSize<< endl ;
	first = patFALSE ;
      }
  return(gevBufferSize) ;
}

void patParameters::setgevBufferSize(const long& s) {
  gevBufferSize = s;
}
long patParameters::getgevDataFileDisplayStep() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevDataFileDisplayStep = " << gevDataFileDisplayStep<< endl ;
	first = patFALSE ;
      }
  return(gevDataFileDisplayStep) ;
}

void patParameters::setgevDataFileDisplayStep(const long& s) {
  gevDataFileDisplayStep = s;
}
float patParameters::getgevTtestThreshold() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevTtestThreshold = " << gevTtestThreshold<< endl ;
	first = patFALSE ;
      }
  return(gevTtestThreshold) ;
}

void patParameters::setgevTtestThreshold(const float& s) {
  gevTtestThreshold = s;
}
long patParameters::getgevGlobal() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGlobal = " << gevGlobal<< endl ;
	first = patFALSE ;
      }
  return(gevGlobal) ;
}

void patParameters::setgevGlobal(const long& s) {
  gevGlobal = s;
}
long patParameters::getgevAnalGrad() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevAnalGrad = " << gevAnalGrad<< endl ;
	first = patFALSE ;
      }
  return(gevAnalGrad) ;
}

void patParameters::setgevAnalGrad(const long& s) {
  gevAnalGrad = s;
}
long patParameters::getgevAnalHess() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevAnalHess = " << gevAnalHess<< endl ;
	first = patFALSE ;
      }
  return(gevAnalHess) ;
}

void patParameters::setgevAnalHess(const long& s) {
  gevAnalHess = s;
}
long patParameters::getgevCheapF() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevCheapF = " << gevCheapF<< endl ;
	first = patFALSE ;
      }
  return(gevCheapF) ;
}

void patParameters::setgevCheapF(const long& s) {
  gevCheapF = s;
}
long patParameters::getgevFactSec() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevFactSec = " << gevFactSec<< endl ;
	first = patFALSE ;
      }
  return(gevFactSec) ;
}

void patParameters::setgevFactSec(const long& s) {
  gevFactSec = s;
}
long patParameters::getgevTermCode() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevTermCode = " << gevTermCode<< endl ;
	first = patFALSE ;
      }
  return(gevTermCode) ;
}

void patParameters::setgevTermCode(const long& s) {
  gevTermCode = s;
}
long patParameters::getgevTypx() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevTypx = " << gevTypx<< endl ;
	first = patFALSE ;
      }
  return(gevTypx) ;
}

void patParameters::setgevTypx(const long& s) {
  gevTypx = s;
}
float patParameters::getgevTypF() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevTypF = " << gevTypF<< endl ;
	first = patFALSE ;
      }
  return(gevTypF) ;
}

void patParameters::setgevTypF(const float& s) {
  gevTypF = s;
}
long patParameters::getgevFDigits() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevFDigits = " << gevFDigits<< endl ;
	first = patFALSE ;
      }
  return(gevFDigits) ;
}

void patParameters::setgevFDigits(const long& s) {
  gevFDigits = s;
}
float patParameters::getgevGradTol() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGradTol = " << gevGradTol<< endl ;
	first = patFALSE ;
      }
  return(gevGradTol) ;
}

void patParameters::setgevGradTol(const float& s) {
  gevGradTol = s;
}
float patParameters::getgevMaxStep() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevMaxStep = " << gevMaxStep<< endl ;
	first = patFALSE ;
      }
  return(gevMaxStep) ;
}

void patParameters::setgevMaxStep(const float& s) {
  gevMaxStep = s;
}
long patParameters::getgevItnLimit() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevItnLimit = " << gevItnLimit<< endl ;
	first = patFALSE ;
      }
  return(gevItnLimit) ;
}

void patParameters::setgevItnLimit(const long& s) {
  gevItnLimit = s;
}
float patParameters::getgevDelta() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevDelta = " << gevDelta<< endl ;
	first = patFALSE ;
      }
  return(gevDelta) ;
}

void patParameters::setgevDelta(const float& s) {
  gevDelta = s;
}
string patParameters::getgevAlgo() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevAlgo = " << gevAlgo<< endl ;
	first = patFALSE ;
      }
  return(gevAlgo) ;
}

void patParameters::setgevAlgo(const string& s) {
  gevAlgo = s;
}
long patParameters::getgevScreenPrintLevel() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevScreenPrintLevel = " << gevScreenPrintLevel<< endl ;
	first = patFALSE ;
      }
  return(gevScreenPrintLevel) ;
}

void patParameters::setgevScreenPrintLevel(const long& s) {
  gevScreenPrintLevel = s;
}
long patParameters::getgevLogFilePrintLevel() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevLogFilePrintLevel = " << gevLogFilePrintLevel<< endl ;
	first = patFALSE ;
      }
  return(gevLogFilePrintLevel) ;
}

void patParameters::setgevLogFilePrintLevel(const long& s) {
  gevLogFilePrintLevel = s;
}
long patParameters::getgevGeneratedGroups() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGeneratedGroups = " << gevGeneratedGroups<< endl ;
	first = patFALSE ;
      }
  return(gevGeneratedGroups) ;
}

void patParameters::setgevGeneratedGroups(const long& s) {
  gevGeneratedGroups = s;
}
long patParameters::getgevGeneratedData() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGeneratedData = " << gevGeneratedData<< endl ;
	first = patFALSE ;
      }
  return(gevGeneratedData) ;
}

void patParameters::setgevGeneratedData(const long& s) {
  gevGeneratedData = s;
}
long patParameters::getgevGeneratedAttr() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGeneratedAttr = " << gevGeneratedAttr<< endl ;
	first = patFALSE ;
      }
  return(gevGeneratedAttr) ;
}

void patParameters::setgevGeneratedAttr(const long& s) {
  gevGeneratedAttr = s;
}
long patParameters::getgevGeneratedAlt() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevGeneratedAlt = " << gevGeneratedAlt<< endl ;
	first = patFALSE ;
      }
  return(gevGeneratedAlt) ;
}

void patParameters::setgevGeneratedAlt(const long& s) {
  gevGeneratedAlt = s;
}
long patParameters::getgevSubSampleLevel() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevSubSampleLevel = " << gevSubSampleLevel<< endl ;
	first = patFALSE ;
      }
  return(gevSubSampleLevel) ;
}

void patParameters::setgevSubSampleLevel(const long& s) {
  gevSubSampleLevel = s;
}
long patParameters::getgevSubSampleBasis() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevSubSampleBasis = " << gevSubSampleBasis<< endl ;
	first = patFALSE ;
      }
  return(gevSubSampleBasis) ;
}

void patParameters::setgevSubSampleBasis(const long& s) {
  gevSubSampleBasis = s;
}
long patParameters::getgevComputeLastHessian() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevComputeLastHessian = " << gevComputeLastHessian<< endl ;
	first = patFALSE ;
      }
  return(gevComputeLastHessian) ;
}

void patParameters::setgevComputeLastHessian(const long& s) {
  gevComputeLastHessian = s;
}
float patParameters::getgevEigenvalueThreshold() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevEigenvalueThreshold = " << gevEigenvalueThreshold<< endl ;
	first = patFALSE ;
      }
  return(gevEigenvalueThreshold) ;
}

void patParameters::setgevEigenvalueThreshold(const float& s) {
  gevEigenvalueThreshold = s;
}
long patParameters::getgevNonParamPlotRes() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevNonParamPlotRes = " << gevNonParamPlotRes<< endl ;
	first = patFALSE ;
      }
  return(gevNonParamPlotRes) ;
}

void patParameters::setgevNonParamPlotRes(const long& s) {
  gevNonParamPlotRes = s;
}
float patParameters::getgevNonParamPlotMaxY() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevNonParamPlotMaxY = " << gevNonParamPlotMaxY<< endl ;
	first = patFALSE ;
      }
  return(gevNonParamPlotMaxY) ;
}

void patParameters::setgevNonParamPlotMaxY(const float& s) {
  gevNonParamPlotMaxY = s;
}
long patParameters::getgevNonParamPlotXSizeCm() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevNonParamPlotXSizeCm = " << gevNonParamPlotXSizeCm<< endl ;
	first = patFALSE ;
      }
  return(gevNonParamPlotXSizeCm) ;
}

void patParameters::setgevNonParamPlotXSizeCm(const long& s) {
  gevNonParamPlotXSizeCm = s;
}
long patParameters::getgevNonParamPlotYSizeCm() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevNonParamPlotYSizeCm = " << gevNonParamPlotYSizeCm<< endl ;
	first = patFALSE ;
      }
  return(gevNonParamPlotYSizeCm) ;
}

void patParameters::setgevNonParamPlotYSizeCm(const long& s) {
  gevNonParamPlotYSizeCm = s;
}
float patParameters::getgevNonParamPlotMinXSizeCm() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevNonParamPlotMinXSizeCm = " << gevNonParamPlotMinXSizeCm<< endl ;
	first = patFALSE ;
      }
  return(gevNonParamPlotMinXSizeCm) ;
}

void patParameters::setgevNonParamPlotMinXSizeCm(const float& s) {
  gevNonParamPlotMinXSizeCm = s;
}
float patParameters::getgevNonParamPlotMinYSizeCm() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "gevNonParamPlotMinYSizeCm = " << gevNonParamPlotMinYSizeCm<< endl ;
	first = patFALSE ;
      }
  return(gevNonParamPlotMinYSizeCm) ;
}

void patParameters::setgevNonParamPlotMinYSizeCm(const float& s) {
  gevNonParamPlotMinYSizeCm = s;
}
long patParameters::getsvdMaxIter() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "svdMaxIter = " << svdMaxIter<< endl ;
	first = patFALSE ;
      }
  return(svdMaxIter) ;
}

void patParameters::setsvdMaxIter(const long& s) {
  svdMaxIter = s;
}
long patParameters::gethieMultinomial() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "hieMultinomial = " << hieMultinomial<< endl ;
	first = patFALSE ;
      }
  return(hieMultinomial) ;
}

void patParameters::sethieMultinomial(const long& s) {
  hieMultinomial = s;
}
long patParameters::gethieTruncStructUtil() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "hieTruncStructUtil = " << hieTruncStructUtil<< endl ;
	first = patFALSE ;
      }
  return(hieTruncStructUtil) ;
}

void patParameters::sethieTruncStructUtil(const long& s) {
  hieTruncStructUtil = s;
}
long patParameters::gethieUpdateHessien() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "hieUpdateHessien = " << hieUpdateHessien<< endl ;
	first = patFALSE ;
      }
  return(hieUpdateHessien) ;
}

void patParameters::sethieUpdateHessien(const long& s) {
  hieUpdateHessien = s;
}
long patParameters::gethieDateInLog() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "hieDateInLog = " << hieDateInLog<< endl ;
	first = patFALSE ;
      }
  return(hieDateInLog) ;
}

void patParameters::sethieDateInLog(const long& s) {
  hieDateInLog = s;
}
long patParameters::getbolducMaxAlts() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "bolducMaxAlts = " << bolducMaxAlts<< endl ;
	first = patFALSE ;
      }
  return(bolducMaxAlts) ;
}

void patParameters::setbolducMaxAlts(const long& s) {
  bolducMaxAlts = s;
}
long patParameters::getbolducMaxFact() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "bolducMaxFact = " << bolducMaxFact<< endl ;
	first = patFALSE ;
      }
  return(bolducMaxFact) ;
}

void patParameters::setbolducMaxFact(const long& s) {
  bolducMaxFact = s;
}
long patParameters::getbolducMaxNVar() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "bolducMaxNVar = " << bolducMaxNVar<< endl ;
	first = patFALSE ;
      }
  return(bolducMaxNVar) ;
}

void patParameters::setbolducMaxNVar(const long& s) {
  bolducMaxNVar = s;
}
float patParameters::getStepSecondIndividual() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "StepSecondIndividual = " << StepSecondIndividual<< endl ;
	first = patFALSE ;
      }
  return(StepSecondIndividual) ;
}

void patParameters::setStepSecondIndividual(const float& s) {
  StepSecondIndividual = s;
}
float patParameters::getNLgWeight() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "NLgWeight = " << NLgWeight<< endl ;
	first = patFALSE ;
      }
  return(NLgWeight) ;
}

void patParameters::setNLgWeight(const float& s) {
  NLgWeight = s;
}
float patParameters::getNLhWeight() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "NLhWeight = " << NLhWeight<< endl ;
	first = patFALSE ;
      }
  return(NLhWeight) ;
}

void patParameters::setNLhWeight(const float& s) {
  NLhWeight = s;
}
float patParameters::getTSFractionGradientRequired() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "TSFractionGradientRequired = " << TSFractionGradientRequired<< endl ;
	first = patFALSE ;
      }
  return(TSFractionGradientRequired) ;
}

void patParameters::setTSFractionGradientRequired(const float& s) {
  TSFractionGradientRequired = s;
}
float patParameters::getTSExpTheta() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "TSExpTheta = " << TSExpTheta<< endl ;
	first = patFALSE ;
      }
  return(TSExpTheta) ;
}

void patParameters::setTSExpTheta(const float& s) {
  TSExpTheta = s;
}
long patParameters::getcfsqpMode() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "cfsqpMode = " << cfsqpMode<< endl ;
	first = patFALSE ;
      }
  return(cfsqpMode) ;
}

void patParameters::setcfsqpMode(const long& s) {
  cfsqpMode = s;
}
long patParameters::getcfsqpIprint() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "cfsqpIprint = " << cfsqpIprint<< endl ;
	first = patFALSE ;
      }
  return(cfsqpIprint) ;
}

void patParameters::setcfsqpIprint(const long& s) {
  cfsqpIprint = s;
}
long patParameters::getcfsqpMaxIter() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "cfsqpMaxIter = " << cfsqpMaxIter<< endl ;
	first = patFALSE ;
      }
  return(cfsqpMaxIter) ;
}

void patParameters::setcfsqpMaxIter(const long& s) {
  cfsqpMaxIter = s;
}
float patParameters::getcfsqpEps() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "cfsqpEps = " << cfsqpEps<< endl ;
	first = patFALSE ;
      }
  return(cfsqpEps) ;
}

void patParameters::setcfsqpEps(const float& s) {
  cfsqpEps = s;
}
float patParameters::getcfsqpEpsEqn() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "cfsqpEpsEqn = " << cfsqpEpsEqn<< endl ;
	first = patFALSE ;
      }
  return(cfsqpEpsEqn) ;
}

void patParameters::setcfsqpEpsEqn(const float& s) {
  cfsqpEpsEqn = s;
}
float patParameters::getcfsqpUdelta() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "cfsqpUdelta = " << cfsqpUdelta<< endl ;
	first = patFALSE ;
      }
  return(cfsqpUdelta) ;
}

void patParameters::setcfsqpUdelta(const float& s) {
  cfsqpUdelta = s;
}
long patParameters::getdfoAddToLWRK() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "dfoAddToLWRK = " << dfoAddToLWRK<< endl ;
	first = patFALSE ;
      }
  return(dfoAddToLWRK) ;
}

void patParameters::setdfoAddToLWRK(const long& s) {
  dfoAddToLWRK = s;
}
long patParameters::getdfoAddToLIWRK() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "dfoAddToLIWRK = " << dfoAddToLIWRK<< endl ;
	first = patFALSE ;
      }
  return(dfoAddToLIWRK) ;
}

void patParameters::setdfoAddToLIWRK(const long& s) {
  dfoAddToLIWRK = s;
}
long patParameters::getdfoMaxFunEval() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "dfoMaxFunEval = " << dfoMaxFunEval<< endl ;
	first = patFALSE ;
      }
  return(dfoMaxFunEval) ;
}

void patParameters::setdfoMaxFunEval(const long& s) {
  dfoMaxFunEval = s;
}
float patParameters::getdonlp2Epsx() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "donlp2Epsx = " << donlp2Epsx<< endl ;
	first = patFALSE ;
      }
  return(donlp2Epsx) ;
}

void patParameters::setdonlp2Epsx(const float& s) {
  donlp2Epsx = s;
}
float patParameters::getdonlp2Delmin() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "donlp2Delmin = " << donlp2Delmin<< endl ;
	first = patFALSE ;
      }
  return(donlp2Delmin) ;
}

void patParameters::setdonlp2Delmin(const float& s) {
  donlp2Delmin = s;
}
float patParameters::getdonlp2Smallw() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "donlp2Smallw = " << donlp2Smallw<< endl ;
	first = patFALSE ;
      }
  return(donlp2Smallw) ;
}

void patParameters::setdonlp2Smallw(const float& s) {
  donlp2Smallw = s;
}
float patParameters::getdonlp2Epsdif() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "donlp2Epsdif = " << donlp2Epsdif<< endl ;
	first = patFALSE ;
      }
  return(donlp2Epsdif) ;
}

void patParameters::setdonlp2Epsdif(const float& s) {
  donlp2Epsdif = s;
}
long patParameters::getdonlp2NReset() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "donlp2NReset = " << donlp2NReset<< endl ;
	first = patFALSE ;
      }
  return(donlp2NReset) ;
}

void patParameters::setdonlp2NReset(const long& s) {
  donlp2NReset = s;
}
long patParameters::getsolvoptMaxIter() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "solvoptMaxIter = " << solvoptMaxIter<< endl ;
	first = patFALSE ;
      }
  return(solvoptMaxIter) ;
}

void patParameters::setsolvoptMaxIter(const long& s) {
  solvoptMaxIter = s;
}
long patParameters::getsolvoptDisplay() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "solvoptDisplay = " << solvoptDisplay<< endl ;
	first = patFALSE ;
      }
  return(solvoptDisplay) ;
}

void patParameters::setsolvoptDisplay(const long& s) {
  solvoptDisplay = s;
}
float patParameters::getsolvoptErrorArgument() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "solvoptErrorArgument = " << solvoptErrorArgument<< endl ;
	first = patFALSE ;
      }
  return(solvoptErrorArgument) ;
}

void patParameters::setsolvoptErrorArgument(const float& s) {
  solvoptErrorArgument = s;
}
float patParameters::getsolvoptErrorFunction() {
      static patBoolean first = patTRUE ;
      if (first) {
  outFile << "solvoptErrorFunction = " << solvoptErrorFunction<< endl ;
	first = patFALSE ;
      }
  return(solvoptErrorFunction) ;
}

void patParameters::setsolvoptErrorFunction(const float& s) {
  solvoptErrorFunction = s;
}
  // This is kept for historical reasons. These automatically generated files
  // do not use this function.

string patParameters::appendDirFile(const string& dir,
				    const string& file) {

  string fullName ;
  if ((*dir.rbegin()) == patDirectoryDelimiter) {
    fullName = dir + file ;
  }
  else {
    fullName = dir + patDirectoryDelimiter + file ;
  }

  return fullName ;
}


