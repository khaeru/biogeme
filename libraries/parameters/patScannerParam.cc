#line 2 "patScannerParam.cc"

#line 4 "patScannerParam.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int patFlexParam::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 239
#define YY_END_OF_BUFFER 240
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[2230] =
    {   0,
        0,    0,  240,  239,    2,  239,    3,    3,  239,  239,
      239,  233,  233,  233,  233,  230,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      231,  232,    2,  231,  232,    0,  237,    3,    3,    0,
      233,  233,    0,  234,    1,    3,    0,  234,  233,    0,
        0,  233,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  233,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  236,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  231,  232,    0,    3,  238,  234,    0,    0,
        0,    0,  234,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  234,
        0,    0,  234,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  234,  235,
      235,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  114,    0,    0,    0,    0,    0,
      215,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   43,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   82,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  152,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,   11,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   72,    0,    0,    0,    0,
      102,    0,    0,    0,    0,    0,   81,   78,   83,    0,
       80,    0,    0,    0,    0,    0,    0,   71,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   93,    0,    0,    0,    0,
        0,  208,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  174,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  151,    0,    0,    0,
        0,    0,    0,    0,    0,  168,  167,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   36,   37,   38,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   86,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  192,    0,    0,    0,  219,    0,    0,  212,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      173,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   12,   13,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   42,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   48,    0,    0,
        0,   73,    0,    0,    0,    0,    0,    0,    0,   75,
        0,  203,  204,    0,    0,    0,    0,    0,    0,    0,
        0,   85,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  225,    0,
        0,    0,    0,  209,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  164,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  161,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   84,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   23,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   63,   39,   40,   53,   54,

        0,    0,    0,    0,    0,   49,    0,   50,    0,    0,
        0,    0,    0,    0,    0,    0,  107,    0,    0,    0,
        0,   92,    0,  101,   74,    0,    0,    0,  100,    0,
        0,    0,  207,    0,    0,    0,  113,    0,    0,    0,
        0,  108,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  220,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  169,  165,    0,    0,    0,  170,    0,    0,
        0,    0,    0,  171,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  191,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   30,   33,
       31,   32,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   56,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   46,    0,    0,    0,   60,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      213,  210,    0,  214,    0,    0,    0,    0,    0,    0,

        0,  162,  163,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  172,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  166,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   25,    0,    0,   65,    0,   59,
        0,   57,   41,   58,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  104,

        0,    0,    0,    0,    0,  103,    0,    0,    0,    0,
        0,   96,    0,    0,    0,    0,    0,    0,  201,    0,
        0,    0,    0,  211,    0,  216,    0,  221,  223,  224,
      222,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  153,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  196,
        0,    0,    0,   98,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   14,    5,    0,    0,

        0,    0,    0,    8,    0,    0,    0,   55,    0,   64,
        0,    0,   45,    0,    0,    0,    0,    0,   99,    0,
        0,    0,    0,    0,   91,    0,    0,   90,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      198,  199,  200,  217,  218,    0,    0,  158,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    6,    7,    0,    0,    0,
        0,    0,    0,   26,   27,    0,    0,    0,    0,    0,
        0,   69,    0,   52,    0,    0,    0,   51,    0,    0,
        0,   94,    0,    0,    0,   89,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  125,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  155,    0,    0,    0,    0,  141,    0,  193,    0,

        0,  227,    0,    0,  226,   88,    0,   19,   18,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   68,    0,    0,    0,    0,   95,    0,
        0,  111,    0,    0,    0,    0,    0,   77,    0,  205,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      148,    0,    0,    0,    0,    0,  180,    0,    0,    0,
        0,    0,    0,    0,  143,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  156,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  109,    0,    9,    0,    0,    0,    0,    0,

        0,    0,   66,    0,    0,    0,   47,    0,   97,    0,
      106,    0,    0,    0,   76,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  179,  178,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  139,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  195,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   61,    0,  105,    0,    0,    0,    0,   35,    0,
        0,    0,  132,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  115,    0,
        0,  140,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      182,  181,    0,  160,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
        0,    0,    0,    0,    0,    4,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  133,    0,    0,    0,
        0,    0,    0,  177,    0,    0,    0,    0,  185,    0,
        0,  137,  126,    0,  116,    0,    0,    0,    0,    0,
        0,    0,    0,  131,    0,    0,  142,    0,  194,    0,

        0,    0,   15,    0,    0,    0,    0,    0,    0,   67,
       44,   87,    0,    0,    0,   70,    0,    0,  157,    0,
        0,    0,  130,    0,    0,    0,    0,    0,    0,    0,
        0,  150,    0,  186,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  175,    0,    0,    0,  128,
      117,    0,    0,    0,    0,   20,   34,    0,    0,   28,
      202,    0,    0,  197,    0,    0,    0,  129,    0,    0,
        0,    0,    0,    0,    0,    0,  176,    0,    0,    0,
        0,    0,    0,    0,    0,  134,    0,    0,    0,    0,
      154,  228,  229,    0,    0,    0,    0,    0,    0,    0,

      183,    0,  120,  119,    0,    0,    0,    0,    0,  146,
        0,    0,    0,    0,  136,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  159,
      184,    0,    0,    0,  145,    0,    0,  187,  188,  123,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   29,
        0,    0,    0,    0,    0,  135,    0,    0,    0,    0,
        0,  138,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  144,    0,    0,  124,    0,    0,    0,
        0,   17,    0,    0,   16,    0,    0,    0,    0,  189,
      190,    0,    0,    0,  122,   22,    0,  112,  206,    0,

      121,    0,  127,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  118,
        0,    0,  147,    0,    0,   21,    0,  149,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    7,    1,    1,    1,
        1,    8,    9,    4,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   19,   19,   19,   20,    4,    1,
       21,    1,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   31,
       47,    1,   48,   49,    1,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,    1,   77,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    1,
        1,    5,    5,    5,    5,    5,    5,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    1,    2,    6,    5,
        5,    5,    5,    5,    5,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1
    } ;

static yyconst flex_int16_t yy_base[2236] =
    {   0,
        0,    0, 2650, 2651,   76,   78,    0,    0,   71,   78,
       90,  144,   54,   92,   90, 2651,   47, 2608,   71,   42,
     2578, 2584, 2582,   70,   68, 2575, 2577, 2589,   44,   78,
     2592,    0,  195, 2577, 2585,   67, 2585, 2580, 2573,   59,
      122,  143,  164,  146,  169,  131, 2651,    0,    0,  161,
      253,  177,    0,  195, 2651,    0,  168,  239,    0,  267,
      286,  298,   68, 2580, 2596, 2595, 2570, 2569, 2563, 2565,
     2566,  139, 2572, 2586, 2553, 2562,   82, 2557, 2556, 2553,
       87,  147, 2567, 2569,  175, 2554, 2557, 2550,    0, 2568,
      157,  168,  179,  181,  211,  177,  178,  190,  186, 2651,

      151,  242,  198, 2554, 2546, 2549, 2549, 2540, 2556, 2546,
     2547, 2554,  271,  274,  318,    0,  325,  332,  346,  353,
     2586,  361,  374, 2541, 2547, 2541,  372, 2580, 2548, 2547,
     2541, 2544, 2545, 2527, 2525, 2567, 2553,  377, 2552, 2547,
     2546, 2550, 2526,  223,  199, 2536, 2516, 2515, 2519, 2543,
     2509, 2514, 2555, 2539, 2516,  262,  334,  239,   95,  357,
      275,  271,  273,  309,  337,  360,  361,  363,  368, 2524,
     2510,  393, 2514,  408,  412, 2534, 2502, 2538,  442,  449,
      460,  467,  474,  481, 2499, 2520, 2515, 2501, 2510,  349,
     2502, 2515, 2501, 2513,  451, 2492,  381,  438,  440,  489,

     2503, 2527, 2498, 2506, 2488, 2516, 2486, 2496, 2523, 2524,
     2480, 2481, 2480, 2485, 2478, 2492, 2491, 2474, 2499, 2472,
     2483,  465, 2490, 2478, 2486, 2476,  480, 2471, 2470, 2484,
     2475, 2480, 2489,  470,  477,  272,  473,  485, 2482,  501,
      487,  489,  490,  491, 2481,  493,  492, 2458, 2462, 2473,
     2475, 2459,  444,  485,  487,  492, 2465,  523,  498,  487,
     2458,  510,  497,  501,  502,  516,  525,  524, 2471,  522,
     2470, 2449, 2451, 2452, 2458, 2451, 2464,  586,  593,  600,
     2651, 2476, 2475, 2448, 2448, 2455, 2458, 2457, 2439, 2443,
      522, 2439, 2430, 2439, 2451,  526, 2450, 2438, 2433, 2442,

     2442, 2462,  555,  551,  598,  599, 2458,  600, 2470, 2456,
     2454, 2468, 2436, 2430, 2423, 2417, 2427, 2415, 2458, 2421,
     2447, 2450, 2429, 2424, 2423, 2408, 2421, 2416, 2415, 2409,
     2417, 2401, 2414, 2414, 2404, 2397, 2411, 2395, 2394, 2399,
     2407, 2406, 2409, 2417, 2405, 2389, 2398, 2389,  575,  549,
      576,  577,  372,  578, 2651,  581,  583,  585,  584,  586,
     2651,  589,  591, 2401,  630, 2399, 2378, 2435, 2393, 2398,
     2378, 2383, 2390, 2390, 2381, 2373,  589, 2379, 2384, 2381,
     2386, 2376, 2369, 2372, 2370, 2383,  573, 2369, 2375, 2357,
      594,  596, 2367, 2374, 2358, 2368, 2356, 2361,  371, 2352,

     2355, 2367,  580, 2356,  534, 2352, 2364, 2352, 2349, 2348,
     2347, 2344, 2351, 2341, 2357, 2347, 2343, 2334, 2339, 2338,
     2335, 2345, 2352,  339, 2349, 2348, 2337, 2331, 2328, 2331,
      637, 2354, 2326, 2330, 2336, 2324, 2336, 2334, 2334, 2350,
     2349, 2359, 2358, 2343, 2360, 2357, 2345, 2345, 2342, 2333,
     2331, 2340, 2651, 2335, 2329, 2335, 2338, 2320, 2307, 2305,
     2313, 2302, 2311, 2306, 2309,  612, 2293, 2300, 2293, 2294,
     2288, 2292, 2300, 2299, 2651, 2296, 2328, 2325, 2283, 2297,
     2279, 2286, 2289, 2319, 2293, 2291, 2291, 2290, 2284, 2271,
     2285, 2275, 2274,  620,  610,  623,  621, 2288,  625,  636,

      642,  635,  645, 2287,  660,  639, 2300, 2268, 2267,  638,
     2278, 2289, 2302,  666, 2264, 2266, 2262, 2275, 2269,  644,
     2258, 2272, 2251, 2262, 2250, 2253, 2263, 2260, 2246, 2260,
     2261, 2258, 2260, 2257, 2239, 2254, 2274, 2279,  252, 2247,
     2236, 2266, 2240, 2250, 2651, 2235, 2236, 2241, 2244, 2243,
     2226, 2240, 2239, 2239, 2228, 2234,  630, 2249, 2226, 2225,
     2218,  662, 2261, 2221, 2223, 2228, 2212, 2217, 2229, 2208,
     2208, 2246, 2221, 2210, 2223, 2213, 2206, 2651, 2651, 2201,
     2215, 2218, 2213,  345, 2216, 2213, 2195, 2224, 2223, 2203,
     2202, 2189, 2189, 2190, 2651, 2206, 2188, 2225, 2229, 2225,

      673,  698, 2210, 2224, 2215, 2223, 2221,  682,  679, 2210,
     2219, 2218, 2209, 2173, 2183, 2651, 2187, 2176, 2173, 2170,
     2651, 2163, 2172, 2167, 2166, 2178, 2651, 2651, 2651, 2179,
     2651, 2173, 2172, 2172, 2169, 2168, 2167, 2651, 2157, 2155,
     2158, 2163, 2153, 2149, 2154, 2163, 2162, 2157, 2162, 2163,
     2161,  657,  652,  675,  661, 2651,  666, 2163,  678,  694,
      680, 2651, 2162,  681, 2159, 2140, 2140, 2133, 2152, 2150,
     2139, 2132, 2147, 2135, 2160, 2136, 2651,  443, 2135, 2129,
     2141, 2129, 2133, 2122, 2164, 2134, 2127, 2138, 2162, 2123,
     2127, 2144, 2156, 2128, 2114, 2130, 2138, 2109, 2110, 2118,

     2117, 2107, 2104, 2110, 2113, 2120, 2119, 2114, 2097, 2097,
     2101, 2100, 2138, 2112, 2131, 2106, 2651, 2101, 2088, 2130,
     2099, 2099, 2098, 2117, 2066, 2651, 2651,  105,  202,  448,
      701,  675,  682,  667,  676,  713,  671,  679,  692,  675,
      681,  717,  719,  725,  738,  704,  685,  706,  731,  694,
      706,  722,  723,  728,  710,  705,  742,  718,  701,  716,
      749,  740,  746,  736,  743,  741, 2651, 2651, 2651,  742,
      742,  758,  745,  744,  762,  759,  763,  765,  758,  768,
      750,  765,  754,  755,  765,  742,  728,  768,  773, 2651,
      746,  747,  747,  745,  754,  738,  754,  738,  739,  752,

      743,  750,  759,  759,  787,  752,  755, 2651,  765,  755,
      795,  751,  757,  753,  772,  757,  777,  778,  779,  785,
      816, 2651,  783,  784,  786, 2651,  787,  763,  811,  780,
      809,  787,  782,  811,  782,  788,  783,  798,  803,  787,
      801,  806,  783,  791,  832,  835,  792,  804,  838,  815,
     2651,  799,  796,  799,  815,  806,  831,  822,  812,  810,
      850,  808,  815,  817,  821,  826,  811,  819,  816,  823,
      818,  817,  850,  825,  827,  823,  828,  829,  831,  840,
      835,  839,  873,  837,  833,  837,  861,  832,  841,  842,
      843,  844,  868,  855,  860,  853,  845,  863,  860,  873,

      866,  859,  895,  865,  866,  848, 2651, 2651,  854,  873,
      871,  860,  859,  876,  877,  899,  863,  881,  882,  879,
      876,  885,  869,  874,  880,  887, 2651,  914,  915,  906,
      921,  905,  909,  916,  920,  908,  935,  923,  931,  915,
      922,  919,  934,  917,  936,  936,  940, 2651,  941,  930,
      939, 2651,  905,  897,  917,  918,  907,  916,  902, 2651,
      944, 2651, 2651,  906,  922,  923,  908,  939,  922,  941,
      928, 2651,  930,  920,  935,  936,  924,  924,  935,  936,
      943,  944,  945,  946,  947,  949,  950,  956, 2651,  980,
      934,  938,  934, 2651,  936,  976,  982,  947,  963,  949,

      957,  969,  953,  953,  998,  984, 2651,  971,  972,  966,
      978,  968,  980,  981,  964,  981,  967,  983,  968, 2651,
      977,  981,  986,  983,  988,  981,  979,  983,  990,  997,
     1023, 1013, 1028, 1008, 1002, 1027, 1030, 1006, 1001,  989,
     1022, 1002, 1011, 1001, 1013,  999,  991, 1013, 1010, 1018,
     1013, 1014, 1038, 1008, 1004, 1045, 1006, 1008, 1010, 1005,
     1012, 1017, 2651, 1017, 1028, 1015, 1016, 1035, 1032, 1019,
     1030, 1024, 1037, 1023, 1024, 1024, 2651, 1041, 1042, 1024,
     1045, 1031, 1049, 1048, 1050, 1038, 1066, 1078, 1070, 1067,
     1074, 1072, 1074, 1075, 1074, 1073, 2651, 2651, 2651, 2651,

     1070, 1078, 1093, 1088, 1090, 2651, 1082, 2651, 1082, 1094,
     1085, 1094, 1065, 1059, 1075, 1057, 2651, 1060, 1070, 1075,
     1061, 2651, 1079, 2651, 2651, 1063, 1072, 1065, 2651, 1105,
     1073, 1064, 2651, 1110, 1072, 1079, 2651, 1093, 1103, 1115,
     1096, 2651, 1098, 1099, 1097, 1087, 1099, 1107, 1092, 1087,
     1104, 1109, 1116, 1122, 1093, 1107, 1108, 2651, 1113, 1107,
     1116, 1102, 1113, 1122, 1115, 1107, 1142, 1122, 1108, 1153,
     1107, 1119, 2651, 2651, 1156, 1124, 1129, 2651, 1117, 1155,
     1117, 1150, 1134, 2651, 1155, 1147, 1129, 1125, 1138, 1142,
     1137, 1146, 1130, 1140, 1141, 1128, 1131, 1148, 1136, 1152,

     1138, 1152, 1138, 1147, 1182, 1156, 1144, 1145, 1180, 1189,
     1151, 1154, 1150, 1164, 1157, 1157, 1159, 1194, 2651, 1157,
     1163, 1158, 1160, 1161, 1178, 1206, 1174, 1163, 2651, 2651,
     2651, 2651, 1180, 1177, 1178, 1168, 1188, 1181, 1168, 1187,
     1181, 1180, 1204, 1205, 2651, 1212, 1218, 1210, 1226, 1210,
     1216, 1227, 1218, 1213, 2651, 1215, 1215, 1217, 2651, 1219,
     1218, 1239, 1201, 1196, 1203, 1201, 1204, 1204, 1207, 1215,
     1201, 1221, 1218, 1219, 1211, 1208, 1247, 1211, 1205, 1254,
     1242, 1234, 1235, 1236, 1237, 1238, 1239, 1222, 1240, 1243,
     2651, 2651, 1227, 2651, 1256, 1264, 1247, 1236, 1245, 1232,

     1231, 2651, 2651, 1252, 1236, 1232, 1250, 1259, 1285, 1261,
     1254, 1245, 1244, 1261, 1262, 1295, 1264, 1250, 2651, 1253,
     1286, 1254, 1275, 1289, 1277, 1287, 1260, 1263, 1270, 1309,
     1273, 1267, 1268, 1276, 1271, 1281, 1290, 1298, 1307, 1293,
     1290, 1287, 1296, 2651, 1293, 1322, 1286, 1293, 1294, 1297,
     1296, 1285, 1288, 1290, 1297, 1292, 1291, 1291, 1322, 1313,
     1306, 1307, 1297, 1300, 1329, 1334, 1302, 1304, 1302, 1303,
     1310, 1312, 1307, 1309, 2651, 1324, 1326, 2651, 1339, 2651,
     1356, 2651, 2651, 2651, 1347, 1350, 1343, 1350, 1357, 1352,
     1345, 1348, 1355, 1349, 1338, 1329, 1368, 1328, 1346, 2651,

     1356, 1331, 1335, 1333, 1336, 2651, 1337, 1350, 1350, 1336,
     1356, 2651, 1339, 1360, 1361, 1362, 1365, 1384, 2651, 1367,
     1348, 1349, 1353, 2651, 1389, 2651, 1361, 2651, 2651, 2651,
     2651, 1383, 1374, 1371, 1355, 1359, 1370, 1402, 1374, 1395,
     1379, 1371, 1373, 1386, 1381, 1377, 1367, 1420, 1391, 1390,
     1388, 1377, 2651, 1388, 1389, 1379, 1395, 1383, 1400, 1385,
     1392, 1403, 1389, 1432, 1410, 1399, 1399, 1400, 1414, 1415,
     1430, 1444, 1407, 1402, 1402, 1404, 1400, 1417, 1407, 2651,
     1425, 1424, 1410, 2651, 1429, 1458, 1427, 1430, 1414, 1472,
     1434, 1438, 1460, 1440, 1452, 1438, 2651, 2651, 1425, 1426,

     1432, 1427, 1423, 2651, 1474, 1441, 1474, 2651, 1476, 2651,
     1459, 1478, 2651, 1480, 1483, 1469, 1482, 1468, 2651, 1438,
     1437, 1437, 1443, 1455, 2651, 1447, 1446, 2651, 2651, 1458,
     1465, 1464, 1466, 1460, 1473, 1474, 1475, 1476, 1477, 1478,
     2651, 2651, 2651, 2651, 2651, 1475, 1503, 2651, 1481, 1464,
     1467, 1478, 1487, 1480, 1476, 1499, 1484, 1474, 1476, 1485,
     1477, 1479, 1488, 1500, 1484, 1483, 1486, 1491, 1493, 1486,
     1494, 1491, 1493, 1511, 1510, 1509, 1493, 1521, 1499, 1500,
     1501, 1515, 1501, 1502, 1511, 1511, 1511, 1525, 1522, 1523,
     1528, 1522, 1516, 1556, 1519, 1529, 1523, 1516, 1528, 1513,

     1521, 1519, 1523, 1539, 1538, 2651, 2651, 1530, 1531, 1541,
     1524, 1547, 1526, 2651, 2651, 1557, 1575, 1560, 1574, 1534,
     1567, 2651, 1583, 2651, 1565, 1574, 1567, 2651, 1569, 1556,
     1557, 2651, 1554, 1551, 1540, 2651, 1544, 1546, 1550, 1560,
     1555, 1572, 1573, 1574, 1575, 1576, 1577, 1576, 1569, 1559,
     1600, 1566, 1566, 1566, 1566, 1609, 1581, 1571, 1582, 1571,
     1588, 1579, 1588, 1577, 1578, 1579, 1585, 1586, 1601, 1583,
     1602, 1600, 1586, 1629, 1603, 1597, 1590, 2651, 1610, 1603,
     1604, 1599, 1639, 1612, 1633, 1642, 1598, 1615, 1643, 1603,
     1601, 2651, 1611, 1610, 1613, 1609, 2651, 1625, 2651, 1636,

     1625, 2651, 1624, 1618, 2651, 2651, 1617, 2651, 2651, 1615,
     1616, 1632, 1617, 1622, 1630, 1632, 1660, 1633, 1652, 1660,
     1668, 1653, 1656, 2651, 1635, 1646, 1635, 1646, 2651, 1643,
     1633, 2651, 1649, 1632, 1657, 1659, 1658, 2651, 1660, 2651,
     1648, 1649, 1653, 1659, 1653, 1647, 1647, 1649, 1660, 1652,
     2651, 1665, 1673, 1656, 1664, 1662, 2651, 1660, 1678, 1660,
     1664, 1663, 1700, 1680, 2651, 1701, 1678, 1687, 1698, 1675,
     1674, 1673, 1692, 1682, 1678, 1690, 1695, 1692, 1697, 2651,
     1694, 1695, 1700, 1701, 1695, 1734, 1708, 1690, 1691, 1698,
     1692, 1711, 2651, 1696, 2651, 1707, 1702, 1714, 1712, 1702,

     1701, 1707, 1733, 1731, 1731, 1749, 2651, 1722, 2651, 1714,
     2651, 1725, 1721, 1717, 2651, 1733, 1734, 1735, 1736, 1727,
     1732, 1716, 1720, 1739, 1721, 1752, 1752, 1733, 1741, 1739,
     1738, 1773, 1737, 1739, 2651, 2651, 1739, 1731, 1748, 1753,
     1741, 1759, 1756, 1771, 1772, 1752, 1761, 1765, 1749, 1796,
     1762, 2651, 1793, 1771, 1772, 1752, 1768, 1784, 1765, 1759,
     1767, 1760, 1777, 1802, 1760, 1769, 1776, 2651, 1773, 1767,
     1779, 1768, 1776, 1790, 1783, 1788, 1789, 1781, 1819, 1820,
     1825, 2651, 1785, 2651, 1779, 1779, 1782, 1804, 2651, 1805,
     1806, 1792, 2651, 1803, 1790, 1785, 1821, 1797, 1793, 1822,

     1810, 1797, 1814, 1827, 1804, 1800, 1843, 1803, 2651, 1808,
     1802, 2651, 1802, 1813, 1809, 1820, 1821, 1826, 1813, 1820,
     1809, 1816, 1859, 1828, 1815, 1819, 1835, 1832, 1834, 1838,
     2651, 2651, 1839, 2651, 1865, 1827, 1829, 1836, 1844, 1841,
     1850, 1833, 1858, 1834, 1835, 1837, 1839, 1853, 1875, 2651,
     1876, 1841, 1861, 1858, 1874, 2651, 1866, 1867, 1860, 1849,
     1860, 1879, 1856, 1849, 1872, 1869, 2651, 1867, 1890, 1876,
     1860, 1901, 1871, 2651, 1868, 1878, 1887, 1889, 2651, 1861,
     1862, 2651, 2651, 1873, 2651, 1906, 1873, 1881, 1875, 1890,
     1884, 1877, 1880, 2651, 1881, 1920, 2651, 1876, 2651, 1888,

     1888, 1890, 2651, 1896, 1901, 1888, 1900, 1908, 1892, 2651,
     2651, 2651, 1899, 1934, 1908, 2651, 1915, 1928, 2651, 1915,
     1897, 1895, 2651, 1899, 1901, 1906, 1907, 1910, 1948, 1916,
     1914, 2651, 1915, 2651, 1937, 1938, 1925, 1926, 1920, 1924,
     1933, 1915, 1931, 1959, 1948, 2651, 1920, 1935, 1922, 2651,
     2651, 1922, 1929, 1963, 1925, 2651, 2651, 1931, 1927, 2651,
     2651, 1947, 1932, 2651, 1944, 1937, 1947, 2651, 1934, 1934,
     1943, 1936, 1941, 1953, 1947, 1955, 2651, 1952, 1953, 1988,
     1989, 1960, 1947, 1947, 1959, 2651, 1960, 1965, 1983, 1953,
     2651, 2651, 2651, 1967, 1966, 1963, 1967, 1968, 1957, 1995,

     2651, 1964, 2651, 2651, 1977, 1981, 1971, 1970, 1980, 2651,
     1960, 1961, 1975, 1976, 2651, 1970, 1973, 1979, 1981, 1975,
     1994, 1988, 2012, 2024, 1995, 1985, 1989, 1993, 1994, 2651,
     2651, 1984, 2000, 1997, 2651, 2002, 2003, 2651, 2651, 2651,
     2000, 2009, 2006, 1991, 1995, 1999, 2001, 2037, 2000, 2651,
     2005, 1999, 2003, 2008, 2014, 2651, 2005, 2050, 2051, 2003,
     2008, 2651, 2017, 2029, 2019, 2020, 2053, 2013, 2016, 2018,
     2032, 2033, 2024, 2651, 2027, 2028, 2651, 2037, 2023, 2031,
     2041, 2651, 2066, 2042, 2651, 2043, 2045, 2049, 2037, 2651,
     2651, 2048, 2034, 2049, 2651, 2651, 2075, 2651, 2651, 2038,

     2651, 2069, 2651, 2038, 2054, 2067, 2060, 2057, 2044, 2044,
     2047, 2048, 2048, 2059, 2068, 2051, 2062, 2060, 2060, 2651,
     2073, 2066, 2651, 2062, 2057, 2651, 2053, 2651, 2651, 2127,
     2132, 2138, 2141, 2145, 2150
    } ;

static yyconst flex_int16_t yy_def[2236] =
    {   0,
     2229,    1, 2229, 2229, 2229, 2230, 2231, 2232, 2229, 2229,
     2229, 2229,   12,   12,   14, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2233, 2234, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2230, 2229, 2231, 2232, 2229,
     2229, 2229, 2233, 2229, 2229, 2235, 2229, 2229,   15, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2233, 2234,
     2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2229,

     2234, 2234, 2234, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2235, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2234, 2234, 2234, 2234, 2234,
     2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2234, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2234, 2234, 2234, 2234, 2234, 2234, 2234,
     2234, 2234, 2234, 2234, 2234, 2234, 2234, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2234, 2234,
     2234, 2234, 2234, 2234, 2229, 2234, 2234, 2234, 2234, 2234,
     2229, 2234, 2234, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2234, 2234, 2234, 2234, 2234, 2234, 2234,

     2234, 2234, 2234, 2234, 2234, 2234, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2234, 2234, 2234, 2234, 2229, 2234, 2234, 2234, 2234,
     2234, 2229, 2229, 2234, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2234, 2234, 2234, 2234,
     2234, 2229, 2234, 2234, 2234, 2229, 2234, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2234, 2234, 2234, 2234, 2229, 2234, 2234, 2234, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2234, 2234, 2234,
     2234, 2229, 2234, 2234, 2234, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2234, 2234, 2234, 2234, 2234, 2234, 2234, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2234, 2234, 2234, 2234, 2234, 2229, 2234,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2234, 2234, 2234, 2234, 2234, 2234,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2234, 2234, 2234, 2234, 2234, 2234, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2234, 2234, 2234, 2229, 2234, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2234, 2234, 2234, 2234, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2234, 2229, 2234,
     2234, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2234, 2234, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2234, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,    0, 2229,
     2229, 2229, 2229, 2229, 2229
    } ;

static yyconst flex_int16_t yy_nxt[2729] =
    {   0,
        4,    5,    5,    5,    6,    7,    8,    4,    9,    9,
       10,   11,   12,   13,   14,   15,   15,   15,   15,    4,
       16,   17,   18,   19,    4,   20,   21,    4,    4,   22,
        4,    4,   23,   24,   25,   26,   27,    4,   28,   29,
       30,    4,    4,   31,   32,    4,   33,    4,    4,    4,
       34,   35,   36,    4,    4,   37,   38,    4,   39,    4,
        4,    4,    4,    4,    4,    4,    4,   40,    4,    4,
        4,    4,   32,    4,    4,   41,   42,   43,   43,   43,
       47,   50,   47,   51,   52,   52,   52,   52,   52,   52,
       54,   54,   54,   54,   54,   54,   54,   55, 2229,   74,

       77,   56,   62,   62,   62,   62,   69,   63,   62,   62,
       62,   66,   83,   84,   70,   53,   64,   85,   78,   75,
       67,  106,  111,  113,  113,  113, 2229,   76,  124,  112,
      107,   79,  125,   47,   68,   47, 2229,  140,  141,   86,
      145,   87,  100,   53,  114,  114,  114,  113,  113,  113,
      146,   44,   45,   57,   58,  237,   59,   59,   59,   59,
       59,   59,   59,   60, 2229,   43,   43,   43,  888,   61,
      114,  114,  114,   54,   54,   54,   54,   54,   54,   54,
      117,  117,  117,  117,  117,  117,  117,   58,   53,   52,
       52,   52,   52,   52,   52,   52,  134,   61,  100,  147,

      151,  152,   61,  135,  100,  166,  156,   54,   54,   54,
       54,   54,   54,   54,  148,  100,   53,   91,   92,   93,
      115,   94,   95,   96,  100,  100,  100,   97,  100,   98,
       61,  157,  158,  100,  162,   99,  161,  100,  159,   44,
       45,  163,  100,  164,  160,  100,  101,  102,  115,  165,
      222,  118,  118,  118,  118,  118,  118,  118,  100,  889,
      223,  169,  103,   58,  119,   52,   52,   52,   52,   52,
       52,   52,  113,  113,  113,  114,  114,  114,   61,  120,
      120,  120,  120,  120,  120,  121,  100,  220,  702,  100,
      221,  703,  119,  236,  122,  122,  167,   53,  123,  123,

      123,  123,  123,  123,  123,  168,   61,   57,   58,  100,
       62,   62,   62,   62,   62,   62,   62,  239,  100,  100,
      100,  352,  100,   61,  240,   53,  179,  179,  241,  234,
      180,  180,  180,  180,  180,  180,  180,  117,  117,  117,
      117,  117,  117,  117,  118,  118,  118,  118,  118,  118,
      118,   61,  578,  579,  182,  182,  100,  181,  183,  183,
      183,  183,  183,  183,  183,  121,  121,  121,  121,  121,
      121,  121,  184,  123,  123,  123,  123,  123,  123,  123,
      242,  100,  747,  748,  100,  181,  123,  123,  123,  123,
      123,  123,  123,  188,  243,  189,  235,  190,  191,  192,

      210,  193,  211,  194,  100,  195,  212,  100,  100,  196,
      100,  197,  198,  199,  250,  100,  213,  287,  214,  100,
      550,  288,  551,  238,  245,  246,  251,  244,  247,  253,
      254,  255,  256,  257,  258,  259,  271,  260,  296,  498,
      261,  262,  263,  264,  265,  272,  266,  267,  268,  297,
      269,  270,  273,  274,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  278,  278,
      840,  841,  279,  279,  279,  279,  279,  279,  279,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  280,  280,  280,  280,  280,  280,  281,

      293,  298,  300,  334,  369,  890,  370,  301,  294,  340,
      302,  299,  303,  371,  304,  305,  306,  100,  341,  342,
      100,  307,  308,  309,  100,  310,  353,  349,  335,  350,
      311,  312,  100,  356,  100,  351,  100,  100,  100,  100,
      100,  376,  372,  374,  357,  377,  354,  380,  100,  387,
      375,  384,  359,  362,  373,  388,  360,  358,  385,  390,
      392,  378,  363,  394,  386,  398,  393,  391,  396,  399,
      395,  410,  381,  428,  400,  397,  401,  406,  402,  429,
      382,  434,  403,  442,  558,  411,  383,  444,  435,  495,
      443,  445,  407,  404,  405,  559,  100,  408,  279,  279,

      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  281,  281,  281,  281,  281,  281,  281,  446,
      448,  451,  100,  100,  100,  100,  494,  447,  100,  452,
      100,  100,  100,  100,  449,  555,  100,  535,  100,  523,
      524,  453,  556,  536,  500,  496,  497,  499,  502,  525,
      504,  501,  503,  505,  506,  508,  540,  100,  542,  509,
      652,  541,  543,  510,  586,  622,  587,  100,  100,  623,
      100,  511,  100,  659,  663,  624,  653,  588,  654,  658,
      625,  655,  100,  100,  661,  657,  100,  668,  726,  100,
      673,  674,  100,  682,  720,  683,  721,  660,  764,  100,

      675,  669,  765,  664,  100,  676,  775,  100,  100,  766,
      767,  768,  769,  100,  776,  779,  777,  780,  781,  821,
      778,  818,  100,  817,  819,  100,  824,  100,  100,  820,
      891,  823,  892,  893,  727,  894,  895,  896,  897,  899,
      900,  100,  901,  902,  903,  904,  898,  905,  825,  827,
      906,  907,  908,  909,  910,  911,  912,  913,  916,  917,
      918,  919,  920,  914,  921,  922,  923,  924,  925,  926,
      927,  928,  915,  929,  932,  933,  934,  935,  936,  937,
      930,  938,  939,  940,  941,  942,  943,  944,  931,  945,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,

      956,  957,  958,  959,  960,  961,  962,  963,  964,  965,
      966,  967,  968,  969,  970,  971,  972,  973,  974,  976,
      977,  978,  979,  980,  100,  100,  100,  984,  975,  985,
      100,  100,  100,  100,  989,  990,  991,  992,  993,  988,
      994,  987,  995,  996,  997,  982,  981,  983,  998,  986,
      999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1010, 1011,  100, 1012, 1013, 1014, 1015, 1016, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1037, 1038,
     1039, 1040, 1035, 1041, 1042, 1043, 1044, 1045, 1046, 1047,

     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
     1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
     1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
     1099, 1100, 1101, 1102, 1088, 1103, 1104, 1105, 1106, 1107,
     1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
     1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
     1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
      100,  100,  100,  100, 1142, 1141,  100,  100, 1140, 1149,

     1150, 1146, 1151,  100, 1152, 1153, 1147, 1155, 1156, 1144,
     1138, 1143, 1139, 1145, 1148, 1157, 1159, 1160, 1161, 1154,
     1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1158, 1177, 1178, 1179, 1180,
     1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190,
     1192, 1193, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1200,
     1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210,
     1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220,
     1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230,
     1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240,

     1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250,
     1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
     1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
     1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
      100, 1282, 1283,  100,  100,  100,  100, 1288, 1289, 1290,
      100, 1285, 1286, 1287, 1291, 1292, 1284, 1293, 1294, 1295,
     1296, 1281,  100, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
     1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
     1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
     1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,

     1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1344,
     1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1343, 1348,
     1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
     1364, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
     1375, 1376, 1377, 1378, 1379, 1380, 1365, 1381, 1382, 1383,
     1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
     1404, 1406, 1407, 1408, 1405, 1409, 1410, 1411, 1412, 1413,
     1414,  100,  100,  100,  100, 1419,  100, 1415, 1420,  100,
     1421, 1422, 1423, 1424, 1425, 1426, 1427, 1418, 1428, 1429,

     1430, 1416, 1431, 1432, 1433, 1417, 1434, 1435, 1436, 1437,
     1438, 1439, 1440, 1441, 1442, 1443, 1444, 1449, 1450, 1451,
     1452, 1445, 1446, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1460, 1447, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468,
     1469, 1470, 1471, 1472, 1473, 1474, 1475, 1448, 1476, 1477,
     1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
     1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
     1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,

     1528, 1529, 1530, 1531, 1532, 1533, 1534,  100,  100,  100,
     1539, 1537,  100, 1535,  100, 1541, 1536, 1542, 1538, 1543,
     1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1554,
     1555,  100, 1556, 1557, 1553, 1558, 1540, 1559, 1560, 1561,
     1562, 1563, 1566, 1567, 1564, 1568, 1569, 1565, 1570, 1571,
     1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
     1582, 1583, 1584, 1585, 1586, 1587, 1588, 1590, 1591, 1592,
     1593, 1594, 1595, 1596, 1597, 1598, 1589, 1599, 1600, 1601,
     1603, 1604, 1605, 1608, 1602, 1606, 1607, 1609, 1610, 1611,
     1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,

     1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
     1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
      100,  100,  100,  100,  100,  100, 1648, 1644, 1642, 1649,
     1650, 1643, 1651, 1647, 1652, 1653, 1654, 1655, 1656, 1657,
     1646, 1658, 1659, 1645, 1660, 1661, 1662, 1663, 1664, 1666,
     1667, 1668, 1669, 1670, 1671, 1672, 1665, 1673, 1674, 1675,
     1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
     1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
     1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705,
     1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715,

     1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725,
     1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,  100,
      100,  100, 1738,  100, 1740, 1741, 1742, 1743, 1744, 1735,
     1745, 1737, 1746, 1747, 1748, 1749, 1736, 1750, 1751, 1752,
     1753, 1754, 1739, 1755, 1756, 1757, 1758, 1759, 1760, 1761,
     1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
     1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781,
     1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
     1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811,

     1812, 1813, 1814, 1815,  100,  100,  100,  100, 1820, 1821,
     1822, 1818, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
     1816, 1817, 1831, 1832, 1833, 1834, 1835, 1836, 1819, 1837,
     1838, 1839, 1840, 1841, 1842, 1846, 1847, 1848, 1849, 1843,
     1850, 1851, 1852, 1853, 1854, 1844, 1845, 1855, 1856, 1857,
     1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
     1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
     1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
      100, 1889,  100,  100, 1892, 1893, 1894, 1895, 1896, 1897,
     1898, 1899, 1900, 1901, 1902, 1888, 1903, 1890, 1904, 1905,

     1906, 1907, 1891, 1908, 1909, 1910, 1911, 1912, 1913, 1915,
     1916, 1917, 1918, 1919, 1920, 1921, 1914, 1922, 1923, 1924,
     1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934,
     1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
     1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
     1955, 1956,  100,  100, 1959, 1958, 1960, 1961, 1962, 1963,
     1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973,
     1974, 1975, 1976, 1957, 1977, 1978, 1979, 1980, 1981, 1982,
     1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
     1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,

     2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
     2013, 2014, 2015, 2016,  100, 2018, 2019, 2020, 2021, 2022,
     2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2017,
     2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041,
     2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051,
     2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061,
     2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071,
     2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081,
     2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091,
     2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,

     2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
     2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120, 2121,
     2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
     2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
     2142, 2143, 2144, 2145, 2146, 2147, 2148, 2150, 2151, 2152,
     2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
     2163, 2164, 2165, 2166, 2149, 2167, 2168, 2169, 2170, 2171,
     2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
     2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
     2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201,

     2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211,
     2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221,
     2222, 2223, 2224, 2225, 2226, 2227, 2228,   46,   46,   46,
       46,   46,   48,   48,  887,   48,   48,   48,   49,   49,
      886,   49,   49,   49,   89,   89,   90,  885,  884,   90,
      116,  116,  883,  116,  116,  116,  882,  881,  880,  879,
      878,  877,  876,  875,  874,  873,  872,  871,  870,  869,
      868,  867,  866,  865,  864,  863,  862,  861,  860,  859,
      858,  857,  856,  855,  854,  853,  852,  851,  850,  849,
      848,  847,  846,  845,  844,  843,  842,  839,  838,  837,

      836,  835,  834,  833,  832,  831,  830,  829,  828,  826,
      822,  816,  815,  814,  813,  812,  811,  810,  809,  808,
      807,  806,  805,  804,  803,  802,  801,  800,  799,  798,
      797,  796,  795,  794,  793,  792,  791,  790,  789,  788,
      787,  786,  785,  784,  783,  782,  774,  773,  772,  771,
      770,  763,  762,  761,  760,  759,  758,  757,  756,  755,
      754,  753,  752,  751,  750,  749,  746,  745,  744,  743,
      742,  741,  740,  739,  738,  737,  736,  735,  734,  733,
      732,  731,  730,  729,  728,  725,  724,  723,  722,  719,
      718,  717,  716,  715,  714,  713,  712,  711,  710,  709,

      708,  707,  706,  705,  704,  701,  700,  699,  698,  697,
      696,  695,  694,  693,  692,  691,  690,  689,  688,  687,
      686,  685,  684,  681,  680,  679,  678,  677,  672,  671,
      670,  667,  666,  665,  662,  656,  651,  650,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  630,  629,  628,
      627,  626,  621,  620,  619,  618,  617,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  585,  584,  583,  582,  581,

      580,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  557,
      554,  553,  552,  549,  548,  547,  546,  545,  544,  539,
      538,  537,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  522,  521,  520,  519,  518,  517,  516,  515,  514,
      513,  512,  507,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  450,  441,  440,  439,  438,  437,  436,

      433,  432,  431,  430,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,
      409,  389,  379,  368,  367,  366,  365,  364,  361,  355,
      348,  347,  346,  345,  344,  343,  339,  338,  337,  336,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,
      313,  295,  292,  291,  290,  289,  286,  285,  284,  283,
      282,  277,  276,  275,  252,  249,  248,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  219,  218,  217,
      216,  215,  209,  208,  207,  206,  205,  204,  203,  202,

      201,  200,  187,  186,  185,  184,  178,  177,  176,  175,
      174,  173,  172,  171,  170,  100,  155,  154,  153,  150,
      149,  144,  143,  142,  139,  138,  137,  136,  133,  132,
      131,  130,  129,  128,  127,  126,  110,  109,  108,  105,
      104,   88,   82,   81,   80,   73,   72,   71,   65, 2229,
        3, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229
    } ;

static yyconst flex_int16_t yy_chk[2729] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        6,    9,    6,    9,    9,    9,    9,    9,    9,    9,
       10,   10,   10,   10,   10,   10,   10,   11,   13,   24,

       25,   11,   15,   15,   15,   15,   20,   17,   14,   14,
       14,   19,   29,   29,   20,    9,   17,   30,   25,   24,
       19,   36,   40,   41,   41,   41,   13,   24,   63,   40,
       36,   25,   63,   46,   19,   46,   14,   77,   77,   30,
       81,   30,  159,    9,   42,   42,   42,   44,   44,   44,
       81,    5,    5,   12,   12,  159,   12,   12,   12,   12,
       12,   12,   12,   12,   14,   43,   43,   43,  728,   12,
       45,   45,   45,   50,   50,   50,   50,   50,   50,   50,
       57,   57,   57,   57,   57,   57,   57,   52,   12,   52,
       52,   52,   52,   52,   52,   52,   72,   12,  101,   82,

       85,   85,   52,   72,   91,  101,   91,   54,   54,   54,
       54,   54,   54,   54,   82,   92,   12,   33,   33,   33,
       54,   33,   33,   33,   96,   97,   93,   33,   94,   33,
       52,   92,   93,   99,   96,   33,   95,   98,   94,   43,
       43,   97,   33,   98,   94,  103,   33,   33,   54,   99,
      145,   58,   58,   58,   58,   58,   58,   58,   95,  729,
      145,  103,   33,   51,   58,   51,   51,   51,   51,   51,
       51,   51,  113,  113,  113,  114,  114,  114,   51,   60,
       60,   60,   60,   60,   60,   60,  158,  144,  539,  102,
      144,  539,   58,  158,   61,   61,  102,   51,   61,   61,

       61,   61,   61,   61,   61,  102,   51,   62,   62,  156,
       62,   62,   62,   62,   62,   62,   62,  161,  162,  236,
      163,  236,  161,   62,  162,   51,  115,  115,  163,  156,
      115,  115,  115,  115,  115,  115,  115,  117,  117,  117,
      117,  117,  117,  117,  118,  118,  118,  118,  118,  118,
      118,   62,  424,  424,  119,  119,  164,  118,  119,  119,
      119,  119,  119,  119,  119,  120,  120,  120,  120,  120,
      120,  120,  120,  122,  122,  122,  122,  122,  122,  122,
      164,  157,  584,  584,  165,  118,  123,  123,  123,  123,
      123,  123,  123,  127,  165,  127,  157,  127,  127,  127,

      138,  127,  138,  127,  160,  127,  138,  166,  167,  127,
      168,  127,  127,  127,  172,  169,  138,  190,  138,  353,
      399,  190,  399,  160,  167,  168,  172,  166,  169,  174,
      174,  174,  174,  174,  174,  174,  175,  174,  197,  353,
      174,  174,  174,  174,  174,  175,  174,  174,  174,  197,
      174,  174,  175,  175,  179,  179,  179,  179,  179,  179,
      179,  180,  180,  180,  180,  180,  180,  180,  181,  181,
      678,  678,  181,  181,  181,  181,  181,  181,  181,  182,
      182,  182,  182,  182,  182,  182,  183,  183,  183,  183,
      183,  183,  183,  184,  184,  184,  184,  184,  184,  184,

      195,  198,  199,  222,  253,  730,  253,  199,  195,  227,
      200,  198,  200,  253,  200,  200,  200,  234,  227,  227,
      237,  200,  200,  200,  235,  200,  237,  234,  222,  235,
      200,  200,  238,  240,  241,  235,  242,  243,  244,  247,
      246,  256,  254,  255,  241,  256,  238,  258,  240,  260,
      255,  259,  243,  246,  254,  260,  244,  242,  259,  262,
      263,  256,  247,  264,  259,  266,  263,  262,  265,  266,
      264,  270,  258,  291,  267,  265,  267,  268,  267,  291,
      258,  296,  267,  303,  405,  270,  258,  304,  296,  350,
      303,  304,  268,  267,  267,  405,  350,  268,  278,  278,

      278,  278,  278,  278,  278,  279,  279,  279,  279,  279,
      279,  279,  280,  280,  280,  280,  280,  280,  280,  305,
      306,  308,  349,  351,  352,  354,  349,  305,  356,  308,
      357,  359,  358,  360,  306,  403,  362,  387,  363,  377,
      377,  308,  403,  387,  356,  351,  352,  354,  358,  377,
      360,  357,  359,  362,  363,  365,  391,  495,  392,  365,
      494,  391,  392,  365,  431,  466,  431,  494,  497,  466,
      496,  365,  499,  501,  505,  466,  495,  431,  496,  500,
      466,  497,  502,  500,  503,  499,  506,  510,  562,  501,
      514,  514,  503,  520,  557,  520,  557,  502,  601,  653,

      514,  510,  601,  506,  652,  514,  608,  505,  655,  601,
      602,  602,  602,  657,  608,  609,  608,  609,  609,  657,
      608,  653,  654,  652,  654,  659,  660,  661,  664,  655,
      731,  659,  732,  733,  562,  734,  735,  736,  736,  737,
      738,  660,  739,  740,  741,  742,  736,  743,  661,  664,
      744,  745,  745,  746,  747,  748,  749,  749,  750,  751,
      752,  753,  754,  749,  755,  756,  757,  758,  759,  760,
      761,  762,  749,  763,  764,  765,  766,  770,  771,  772,
      763,  773,  774,  775,  776,  777,  778,  779,  763,  780,
      781,  782,  783,  784,  785,  786,  787,  788,  789,  791,

      792,  793,  794,  795,  796,  797,  798,  799,  800,  801,
      802,  803,  804,  805,  806,  807,  809,  810,  811,  812,
      813,  814,  815,  816,  817,  818,  819,  820,  811,  821,
      823,  824,  820,  825,  827,  828,  829,  830,  831,  825,
      832,  824,  833,  834,  835,  818,  817,  819,  836,  823,
      837,  838,  839,  840,  841,  842,  843,  844,  845,  846,
      847,  848,  849,  821,  850,  852,  853,  854,  855,  856,
      857,  858,  859,  860,  861,  862,  863,  864,  865,  866,
      867,  868,  869,  870,  871,  872,  873,  874,  875,  876,
      877,  878,  873,  879,  880,  881,  882,  883,  884,  885,

      886,  887,  888,  889,  890,  891,  892,  893,  894,  895,
      896,  897,  898,  899,  900,  901,  902,  903,  904,  905,
      906,  909,  910,  911,  912,  913,  914,  915,  916,  917,
      918,  919,  920,  921,  922,  923,  924,  925,  926,  928,
      929,  930,  931,  932,  933,  934,  935,  936,  937,  937,
      937,  937,  938,  939,  928,  940,  941,  942,  943,  944,
      945,  946,  947,  949,  950,  951,  953,  954,  955,  956,
      957,  958,  959,  961,  964,  965,  966,  967,  968,  969,
      970,  971,  973,  974,  975,  976,  977,  978,  979,  980,
      981,  982,  983,  984,  985,  984,  986,  987,  983,  991,

      992,  990,  993,  988,  995,  996,  990,  997,  998,  987,
      981,  986,  982,  988,  990,  999, 1000, 1001, 1002,  996,
     1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013,
     1014, 1015, 1016, 1017, 1018,  999, 1019, 1021, 1022, 1023,
     1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
     1034, 1035, 1033, 1036, 1037, 1038, 1039, 1040, 1041, 1042,
     1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052,
     1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062,
     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
     1074, 1075, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084,

     1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
     1095, 1096, 1101, 1102, 1103, 1104, 1105, 1107, 1109, 1110,
     1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1120, 1121,
     1123, 1126, 1127, 1128, 1130, 1131, 1132, 1134, 1135, 1136,
     1138, 1139, 1140, 1141, 1145, 1143, 1144, 1146, 1147, 1148,
     1139, 1143, 1144, 1145, 1149, 1150, 1141, 1151, 1152, 1153,
     1154, 1138, 1140, 1155, 1156, 1157, 1159, 1160, 1161, 1162,
     1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
     1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1185, 1186,
     1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,

     1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
     1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1205, 1209,
     1215, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1225,
     1226, 1227, 1228, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1244, 1246, 1226, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1256, 1257, 1258, 1260, 1261,
     1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
     1272, 1273, 1274, 1275, 1272, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 1287, 1282, 1287, 1281,
     1288, 1289, 1290, 1293, 1295, 1296, 1297, 1285, 1298, 1299,

     1300, 1283, 1301, 1304, 1305, 1284, 1306, 1307, 1308, 1309,
     1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1320,
     1321, 1316, 1316, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
     1329, 1316, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
     1338, 1339, 1340, 1341, 1342, 1343, 1345, 1316, 1346, 1347,
     1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
     1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
     1368, 1369, 1370, 1371, 1372, 1373, 1374, 1376, 1377, 1379,
     1381, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
     1394, 1395, 1396, 1397, 1398, 1399, 1401, 1402, 1403, 1404,

     1405, 1407, 1408, 1409, 1410, 1411, 1413, 1414, 1415, 1416,
     1418, 1416, 1417, 1414, 1420, 1421, 1415, 1422, 1417, 1423,
     1425, 1427, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
     1440, 1418, 1441, 1442, 1438, 1443, 1420, 1444, 1445, 1446,
     1447, 1448, 1449, 1450, 1448, 1451, 1452, 1448, 1454, 1455,
     1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
     1476, 1477, 1478, 1479, 1481, 1482, 1472, 1483, 1485, 1486,
     1487, 1488, 1489, 1491, 1486, 1490, 1490, 1492, 1493, 1494,
     1495, 1496, 1499, 1500, 1501, 1502, 1503, 1505, 1506, 1507,

     1509, 1511, 1512, 1514, 1515, 1516, 1517, 1518, 1520, 1521,
     1522, 1523, 1524, 1526, 1527, 1530, 1531, 1532, 1533, 1534,
     1535, 1536, 1537, 1538, 1539, 1540, 1546, 1537, 1535, 1547,
     1549, 1536, 1550, 1540, 1551, 1552, 1553, 1554, 1555, 1556,
     1539, 1557, 1558, 1538, 1559, 1560, 1561, 1562, 1563, 1564,
     1565, 1566, 1567, 1568, 1569, 1570, 1563, 1571, 1572, 1573,
     1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583,
     1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593,
     1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603,
     1604, 1605, 1608, 1609, 1610, 1611, 1612, 1613, 1616, 1617,

     1618, 1619, 1620, 1621, 1623, 1625, 1626, 1627, 1629, 1630,
     1631, 1633, 1634, 1635, 1637, 1638, 1639, 1640, 1641, 1642,
     1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1642,
     1652, 1644, 1653, 1654, 1655, 1656, 1643, 1657, 1658, 1659,
     1660, 1661, 1646, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
     1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1679,
     1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
     1690, 1691, 1693, 1694, 1695, 1696, 1698, 1700, 1701, 1703,
     1704, 1707, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
     1718, 1719, 1720, 1721, 1722, 1723, 1725, 1726, 1727, 1728,

     1730, 1731, 1733, 1734, 1735, 1737, 1736, 1739, 1741, 1742,
     1743, 1737, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1752,
     1735, 1736, 1753, 1754, 1755, 1756, 1758, 1759, 1739, 1760,
     1761, 1762, 1763, 1764, 1766, 1767, 1768, 1769, 1770, 1766,
     1771, 1772, 1773, 1774, 1775, 1766, 1766, 1776, 1777, 1778,
     1779, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789,
     1790, 1791, 1792, 1794, 1796, 1797, 1798, 1799, 1800, 1801,
     1802, 1803, 1804, 1805, 1806, 1808, 1810, 1812, 1813, 1814,
     1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825,
     1826, 1827, 1827, 1828, 1829, 1816, 1830, 1818, 1831, 1832,

     1833, 1834, 1819, 1837, 1838, 1839, 1840, 1841, 1842, 1843,
     1844, 1845, 1846, 1847, 1848, 1849, 1842, 1850, 1851, 1853,
     1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
     1864, 1865, 1866, 1867, 1869, 1870, 1871, 1872, 1873, 1874,
     1875, 1876, 1877, 1878, 1879, 1880, 1881, 1883, 1885, 1886,
     1887, 1888, 1890, 1891, 1892, 1891, 1894, 1895, 1896, 1897,
     1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
     1908, 1910, 1911, 1890, 1913, 1914, 1915, 1916, 1917, 1918,
     1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928,
     1929, 1930, 1933, 1935, 1936, 1937, 1938, 1939, 1940, 1941,

     1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1951, 1952,
     1953, 1954, 1955, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
     1964, 1965, 1966, 1968, 1969, 1970, 1971, 1972, 1973, 1958,
     1975, 1976, 1977, 1978, 1978, 1980, 1981, 1984, 1986, 1986,
     1987, 1988, 1989, 1990, 1991, 1992, 1993, 1995, 1996, 1998,
     2000, 2001, 2002, 2004, 2005, 2006, 2007, 2008, 2009, 2013,
     2014, 2015, 2017, 2018, 2020, 2021, 2022, 2024, 2025, 2026,
     2027, 2028, 2029, 2030, 2031, 2033, 2035, 2036, 2037, 2038,
     2039, 2040, 2041, 2042, 2043, 2044, 2045, 2047, 2048, 2049,
     2052, 2053, 2054, 2055, 2058, 2059, 2062, 2063, 2065, 2066,

     2067, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2078,
     2079, 2080, 2081, 2082, 2083, 2084, 2085, 2087, 2088, 2089,
     2090, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2102, 2105,
     2106, 2107, 2108, 2109, 2111, 2112, 2113, 2114, 2116, 2117,
     2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 2127,
     2128, 2129, 2132, 2133, 2134, 2136, 2137, 2141, 2142, 2143,
     2144, 2145, 2146, 2147, 2124, 2148, 2149, 2151, 2152, 2153,
     2154, 2155, 2157, 2158, 2159, 2160, 2161, 2163, 2164, 2165,
     2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2175, 2176,
     2178, 2179, 2180, 2181, 2183, 2184, 2186, 2187, 2188, 2189,

     2192, 2193, 2194, 2197, 2200, 2202, 2204, 2205, 2206, 2207,
     2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217,
     2218, 2219, 2221, 2222, 2224, 2225, 2227, 2230, 2230, 2230,
     2230, 2230, 2231, 2231,  725, 2231, 2231, 2231, 2232, 2232,
      724, 2232, 2232, 2232, 2233, 2233, 2234,  723,  722, 2234,
     2235, 2235,  721, 2235, 2235, 2235,  720,  719,  718,  716,
      715,  714,  713,  712,  711,  710,  709,  708,  707,  706,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  682,  681,  680,  679,  676,  675,  674,

      673,  672,  671,  670,  669,  668,  667,  666,  665,  663,
      658,  651,  650,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  639,  637,  636,  635,  634,  633,  632,
      630,  626,  625,  624,  623,  622,  620,  619,  618,  617,
      615,  614,  613,  612,  611,  610,  607,  606,  605,  604,
      603,  600,  599,  598,  597,  596,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  583,  582,  581,  580,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      567,  566,  565,  564,  563,  561,  560,  559,  558,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,

      544,  543,  542,  541,  540,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  526,  525,  524,
      523,  522,  521,  519,  518,  517,  516,  515,  513,  512,
      511,  509,  508,  507,  504,  498,  493,  492,  491,  490,
      489,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  474,  473,  472,  471,  470,  469,
      468,  467,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  452,  451,  450,  449,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  430,  429,  428,  427,  426,

      425,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  404,
      402,  401,  400,  398,  397,  396,  395,  394,  393,  390,
      389,  388,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  376,  375,  374,  373,  372,  371,  370,  369,  368,
      367,  366,  364,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  307,  302,  301,  300,  299,  298,  297,

      295,  294,  293,  292,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  277,  276,  275,  274,  273,  272,  271,
      269,  261,  257,  252,  251,  250,  249,  248,  245,  239,
      233,  232,  231,  230,  229,  228,  226,  225,  224,  223,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  202,
      201,  196,  194,  193,  192,  191,  189,  188,  187,  186,
      185,  178,  177,  176,  173,  171,  170,  155,  154,  153,
      152,  151,  150,  149,  148,  147,  146,  143,  142,  141,
      140,  139,  137,  136,  135,  134,  133,  132,  131,  130,

      129,  128,  126,  125,  124,  121,  112,  111,  110,  109,
      108,  107,  106,  105,  104,   90,   88,   87,   86,   84,
       83,   80,   79,   78,   76,   75,   74,   73,   71,   70,
       69,   68,   67,   66,   65,   64,   39,   38,   37,   35,
       34,   31,   28,   27,   26,   23,   22,   21,   18,    3,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,

     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229,
     2229, 2229, 2229, 2229, 2229, 2229, 2229, 2229
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[240] =
    {   0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 
        };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "patScannerParam.ll"
/*-*-c++-*------------------------------------------------------------
//
// File name : patScannerParam.l
// File automatically generated by ./automaticParser
// Michel Bierlaire, EPFL
// Date :      Sun Aug  3 09:53:14 2008
//
//--------------------------------------------------------------------
*/
#line 17 "patScannerParam.ll"

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "patParserParam.hh"
#include <string>
#define YY_BREAK

#line 1801 "patScannerParam.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 288 "patScannerParam.ll"


#line 1904 "patScannerParam.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2230 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2651 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 290 "patScannerParam.ll"
{	/* skip comments */
  int c;
  while ( (c = yyinput()) != 0 ) {
    if ( c == '*' ) {
      if ( (c = yyinput()) == '/' ) break;
      else unput( c );
    }
  }
  break;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 301 "patScannerParam.ll"
{ break; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 302 "patScannerParam.ll"
{ break; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 303 "patScannerParam.ll"
{return patParserParam::pat_BasicTrustRegionSection;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 304 "patScannerParam.ll"
{return patParserParam::pat_BTRMaxGcpIter;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 305 "patScannerParam.ll"
{return patParserParam::pat_BTRArmijoBeta1;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 306 "patScannerParam.ll"
{return patParserParam::pat_BTRArmijoBeta2;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 307 "patScannerParam.ll"
{return patParserParam::pat_BTRStartDraws;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 308 "patScannerParam.ll"
{return patParserParam::pat_BTRIncreaseDraws;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 309 "patScannerParam.ll"
{return patParserParam::pat_BTREta1;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 310 "patScannerParam.ll"
{return patParserParam::pat_BTREta2;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 311 "patScannerParam.ll"
{return patParserParam::pat_BTRGamma1;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 312 "patScannerParam.ll"
{return patParserParam::pat_BTRGamma2;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 313 "patScannerParam.ll"
{return patParserParam::pat_BTRInitRadius;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 314 "patScannerParam.ll"
{return patParserParam::pat_BTRIncreaseTRRadius;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 315 "patScannerParam.ll"
{return patParserParam::pat_BTRUnfeasibleCGIterations;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 316 "patScannerParam.ll"
{return patParserParam::pat_BTRForceExactHessianIfMnl;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 317 "patScannerParam.ll"
{return patParserParam::pat_BTRExactHessian;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 318 "patScannerParam.ll"
{return patParserParam::pat_BTRCheapHessian;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 319 "patScannerParam.ll"
{return patParserParam::pat_BTRQuasiNewtonUpdate;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 320 "patScannerParam.ll"
{return patParserParam::pat_BTRInitQuasiNewtonWithTrueHessian;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 321 "patScannerParam.ll"
{return patParserParam::pat_BTRInitQuasiNewtonWithBHHH;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 322 "patScannerParam.ll"
{return patParserParam::pat_BTRMaxIter;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 323 "patScannerParam.ll"
{return patParserParam::pat_BTRTypf;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 324 "patScannerParam.ll"
{return patParserParam::pat_BTRTolerance;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 325 "patScannerParam.ll"
{return patParserParam::pat_BTRMaxTRRadius;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 326 "patScannerParam.ll"
{return patParserParam::pat_BTRMinTRRadius;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 327 "patScannerParam.ll"
{return patParserParam::pat_BTRUsePreconditioner;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 328 "patScannerParam.ll"
{return patParserParam::pat_BTRSingularityThreshold;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 329 "patScannerParam.ll"
{return patParserParam::pat_BTRKappaEpp;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 330 "patScannerParam.ll"
{return patParserParam::pat_BTRKappaLbs;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 331 "patScannerParam.ll"
{return patParserParam::pat_BTRKappaUbs;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 332 "patScannerParam.ll"
{return patParserParam::pat_BTRKappaFrd;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 333 "patScannerParam.ll"
{return patParserParam::pat_BTRSignificantDigits;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 334 "patScannerParam.ll"
{return patParserParam::pat_CondTrustRegionSection;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 335 "patScannerParam.ll"
{return patParserParam::pat_CTRAETA0;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 336 "patScannerParam.ll"
{return patParserParam::pat_CTRAETA1;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 337 "patScannerParam.ll"
{return patParserParam::pat_CTRAETA2;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 338 "patScannerParam.ll"
{return patParserParam::pat_CTRAGAMMA1;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 339 "patScannerParam.ll"
{return patParserParam::pat_CTRAGAMMA2;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 340 "patScannerParam.ll"
{return patParserParam::pat_CTRAEPSILONC;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 341 "patScannerParam.ll"
{return patParserParam::pat_CTRAALPHA;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 342 "patScannerParam.ll"
{return patParserParam::pat_CTRAMU;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 343 "patScannerParam.ll"
{return patParserParam::pat_CTRAMAXNBRFUNCTEVAL;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 344 "patScannerParam.ll"
{return patParserParam::pat_CTRAMAXLENGTH;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 345 "patScannerParam.ll"
{return patParserParam::pat_CTRAMAXDATA;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 346 "patScannerParam.ll"
{return patParserParam::pat_CTRANBROFBESTPTS;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 347 "patScannerParam.ll"
{return patParserParam::pat_CTRAPOWER;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 348 "patScannerParam.ll"
{return patParserParam::pat_CTRAMAXRAD;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 349 "patScannerParam.ll"
{return patParserParam::pat_CTRAMINRAD;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 350 "patScannerParam.ll"
{return patParserParam::pat_CTRAUPPERBOUND;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 351 "patScannerParam.ll"
{return patParserParam::pat_CTRALOWERBOUND;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 352 "patScannerParam.ll"
{return patParserParam::pat_CTRAGAMMA3;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 353 "patScannerParam.ll"
{return patParserParam::pat_CTRAGAMMA4;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 354 "patScannerParam.ll"
{return patParserParam::pat_CTRACOEFVALID;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 355 "patScannerParam.ll"
{return patParserParam::pat_CTRACOEFGEN;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 356 "patScannerParam.ll"
{return patParserParam::pat_CTRAEPSERROR;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 357 "patScannerParam.ll"
{return patParserParam::pat_CTRAEPSPOINT;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 358 "patScannerParam.ll"
{return patParserParam::pat_CTRACOEFNORM;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 359 "patScannerParam.ll"
{return patParserParam::pat_CTRAMINSTEP;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 360 "patScannerParam.ll"
{return patParserParam::pat_CTRAMINPIVOTVALUE;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 361 "patScannerParam.ll"
{return patParserParam::pat_CTRAGOODPIVOTVALUE;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 362 "patScannerParam.ll"
{return patParserParam::pat_CTRAFINEPS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 363 "patScannerParam.ll"
{return patParserParam::pat_CTRAFINEPSREL;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 364 "patScannerParam.ll"
{return patParserParam::pat_CTRACHECKEPS;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 365 "patScannerParam.ll"
{return patParserParam::pat_CTRACHECKTESTEPS;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 366 "patScannerParam.ll"
{return patParserParam::pat_CTRACHECKTESTEPSREL;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 367 "patScannerParam.ll"
{return patParserParam::pat_CTRAVALMINGAUSS;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 368 "patScannerParam.ll"
{return patParserParam::pat_CTRAFACTOFPOND;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 369 "patScannerParam.ll"
{return patParserParam::pat_ConjugateGradientSection;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 370 "patScannerParam.ll"
{return patParserParam::pat_Precond;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 371 "patScannerParam.ll"
{return patParserParam::pat_Epsilon;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 372 "patScannerParam.ll"
{return patParserParam::pat_CondLimit;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 373 "patScannerParam.ll"
{return patParserParam::pat_PrecResidu;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 374 "patScannerParam.ll"
{return patParserParam::pat_MaxCGIter;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 375 "patScannerParam.ll"
{return patParserParam::pat_TolSchnabelEskow;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 376 "patScannerParam.ll"
{return patParserParam::pat_DefaultValuesSection;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 377 "patScannerParam.ll"
{return patParserParam::pat_MaxIter;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 378 "patScannerParam.ll"
{return patParserParam::pat_InitStep;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 379 "patScannerParam.ll"
{return patParserParam::pat_MinStep;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 380 "patScannerParam.ll"
{return patParserParam::pat_MaxEval;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 381 "patScannerParam.ll"
{return patParserParam::pat_NbrRun;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 382 "patScannerParam.ll"
{return patParserParam::pat_MaxStep;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 383 "patScannerParam.ll"
{return patParserParam::pat_AlphaProba;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 384 "patScannerParam.ll"
{return patParserParam::pat_StepReduc;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 385 "patScannerParam.ll"
{return patParserParam::pat_StepIncr;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 386 "patScannerParam.ll"
{return patParserParam::pat_ExpectedImprovement;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 387 "patScannerParam.ll"
{return patParserParam::pat_AllowPremUnsucc;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 388 "patScannerParam.ll"
{return patParserParam::pat_PrematureStart;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 389 "patScannerParam.ll"
{return patParserParam::pat_PrematureStep;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 390 "patScannerParam.ll"
{return patParserParam::pat_MaxUnsuccIter;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 391 "patScannerParam.ll"
{return patParserParam::pat_NormWeight;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 392 "patScannerParam.ll"
{return patParserParam::pat_FilesSection;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 393 "patScannerParam.ll"
{return patParserParam::pat_InputDirectory;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 394 "patScannerParam.ll"
{return patParserParam::pat_OutputDirectory;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 395 "patScannerParam.ll"
{return patParserParam::pat_TmpDirectory;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 396 "patScannerParam.ll"
{return patParserParam::pat_FunctionEvalExec;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 397 "patScannerParam.ll"
{return patParserParam::pat_jonSimulator;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 398 "patScannerParam.ll"
{return patParserParam::pat_CandidateFile;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 399 "patScannerParam.ll"
{return patParserParam::pat_ResultFile;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 400 "patScannerParam.ll"
{return patParserParam::pat_OutsifFile;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 401 "patScannerParam.ll"
{return patParserParam::pat_LogFile;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 402 "patScannerParam.ll"
{return patParserParam::pat_ProblemsFile;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 403 "patScannerParam.ll"
{return patParserParam::pat_MITSIMorigin;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 404 "patScannerParam.ll"
{return patParserParam::pat_MITSIMinformation;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 405 "patScannerParam.ll"
{return patParserParam::pat_MITSIMtravelTime;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 406 "patScannerParam.ll"
{return patParserParam::pat_MITSIMexec;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 407 "patScannerParam.ll"
{return patParserParam::pat_Formule1Section;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 408 "patScannerParam.ll"
{return patParserParam::pat_AugmentationStep;}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 409 "patScannerParam.ll"
{return patParserParam::pat_ReductionStep;}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 410 "patScannerParam.ll"
{return patParserParam::pat_SubSpaceMaxIter;}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 411 "patScannerParam.ll"
{return patParserParam::pat_SubSpaceConsecutiveFailure;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 412 "patScannerParam.ll"
{return patParserParam::pat_WarmUpnbre;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 413 "patScannerParam.ll"
{return patParserParam::pat_GEVSection;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 414 "patScannerParam.ll"
{return patParserParam::pat_gevInputDirectory;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 415 "patScannerParam.ll"
{return patParserParam::pat_gevOutputDirectory;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 416 "patScannerParam.ll"
{return patParserParam::pat_gevWorkingDirectory;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 417 "patScannerParam.ll"
{return patParserParam::pat_gevSignificantDigitsParameters;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 418 "patScannerParam.ll"
{return patParserParam::pat_gevDecimalDigitsTTest;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 419 "patScannerParam.ll"
{return patParserParam::pat_gevDecimalDigitsStats;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 420 "patScannerParam.ll"
{return patParserParam::pat_gevForceScientificNotation;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 421 "patScannerParam.ll"
{return patParserParam::pat_gevSingularValueThreshold;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 422 "patScannerParam.ll"
{return patParserParam::pat_gevPrintVarCovarAsList;}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 423 "patScannerParam.ll"
{return patParserParam::pat_gevPrintVarCovarAsMatrix;}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 424 "patScannerParam.ll"
{return patParserParam::pat_gevPrintPValue;}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 425 "patScannerParam.ll"
{return patParserParam::pat_gevNumberOfThreads;}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 426 "patScannerParam.ll"
{return patParserParam::pat_gevSaveIntermediateResults;}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 427 "patScannerParam.ll"
{return patParserParam::pat_gevVarCovarFromBHHH;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 428 "patScannerParam.ll"
{return patParserParam::pat_gevDebugDataFirstRow;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 429 "patScannerParam.ll"
{return patParserParam::pat_gevDebugDataLastRow;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 430 "patScannerParam.ll"
{return patParserParam::pat_gevStoreDataOnFile;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 431 "patScannerParam.ll"
{return patParserParam::pat_gevBinaryDataFile;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 432 "patScannerParam.ll"
{return patParserParam::pat_gevDumpDrawsOnFile;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 433 "patScannerParam.ll"
{return patParserParam::pat_gevReadDrawsFromFile;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 434 "patScannerParam.ll"
{return patParserParam::pat_gevGenerateActualSample;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 435 "patScannerParam.ll"
{return patParserParam::pat_gevOutputActualSample;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 436 "patScannerParam.ll"
{return patParserParam::pat_gevNormalDrawsFile;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 437 "patScannerParam.ll"
{return patParserParam::pat_gevRectangularDrawsFile;}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 438 "patScannerParam.ll"
{return patParserParam::pat_gevRandomDistrib;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 439 "patScannerParam.ll"
{return patParserParam::pat_gevMaxPrimeNumber;}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 440 "patScannerParam.ll"
{return patParserParam::pat_gevWarningSign;}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 441 "patScannerParam.ll"
{return patParserParam::pat_gevWarningLowDraws;}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 442 "patScannerParam.ll"
{return patParserParam::pat_gevMissingValue;}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 443 "patScannerParam.ll"
{return patParserParam::pat_gevGenerateFilesForDenis;}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 444 "patScannerParam.ll"
{return patParserParam::pat_gevGenerateGnuplotFile;}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 445 "patScannerParam.ll"
{return patParserParam::pat_gevGeneratePythonFile;}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 446 "patScannerParam.ll"
{return patParserParam::pat_gevPythonFileWithEstimatedParam;}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 447 "patScannerParam.ll"
{return patParserParam::pat_gevFileForDenis;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 448 "patScannerParam.ll"
{return patParserParam::pat_gevAutomaticScalingOfLinearUtility;}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 449 "patScannerParam.ll"
{return patParserParam::pat_gevInverseIteration;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 450 "patScannerParam.ll"
{return patParserParam::pat_gevSeed;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 451 "patScannerParam.ll"
{return patParserParam::pat_gevOne;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 452 "patScannerParam.ll"
{return patParserParam::pat_gevMinimumMu;}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 453 "patScannerParam.ll"
{return patParserParam::pat_gevSummaryParameters;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 454 "patScannerParam.ll"
{return patParserParam::pat_gevSummaryFile;}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 455 "patScannerParam.ll"
{return patParserParam::pat_gevStopFileName;}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 456 "patScannerParam.ll"
{return patParserParam::pat_gevCheckDerivatives;}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 457 "patScannerParam.ll"
{return patParserParam::pat_gevBufferSize;}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 458 "patScannerParam.ll"
{return patParserParam::pat_gevDataFileDisplayStep;}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 459 "patScannerParam.ll"
{return patParserParam::pat_gevTtestThreshold;}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 460 "patScannerParam.ll"
{return patParserParam::pat_gevGlobal;}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 461 "patScannerParam.ll"
{return patParserParam::pat_gevAnalGrad;}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 462 "patScannerParam.ll"
{return patParserParam::pat_gevAnalHess;}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 463 "patScannerParam.ll"
{return patParserParam::pat_gevCheapF;}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 464 "patScannerParam.ll"
{return patParserParam::pat_gevFactSec;}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 465 "patScannerParam.ll"
{return patParserParam::pat_gevTermCode;}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 466 "patScannerParam.ll"
{return patParserParam::pat_gevTypx;}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 467 "patScannerParam.ll"
{return patParserParam::pat_gevTypF;}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 468 "patScannerParam.ll"
{return patParserParam::pat_gevFDigits;}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 469 "patScannerParam.ll"
{return patParserParam::pat_gevGradTol;}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 470 "patScannerParam.ll"
{return patParserParam::pat_gevMaxStep;}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 471 "patScannerParam.ll"
{return patParserParam::pat_gevItnLimit;}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 472 "patScannerParam.ll"
{return patParserParam::pat_gevDelta;}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 473 "patScannerParam.ll"
{return patParserParam::pat_gevAlgo;}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 474 "patScannerParam.ll"
{return patParserParam::pat_gevScreenPrintLevel;}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 475 "patScannerParam.ll"
{return patParserParam::pat_gevLogFilePrintLevel;}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 476 "patScannerParam.ll"
{return patParserParam::pat_gevGeneratedGroups;}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 477 "patScannerParam.ll"
{return patParserParam::pat_gevGeneratedData;}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 478 "patScannerParam.ll"
{return patParserParam::pat_gevGeneratedAttr;}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 479 "patScannerParam.ll"
{return patParserParam::pat_gevGeneratedAlt;}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 480 "patScannerParam.ll"
{return patParserParam::pat_gevSubSampleLevel;}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 481 "patScannerParam.ll"
{return patParserParam::pat_gevSubSampleBasis;}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 482 "patScannerParam.ll"
{return patParserParam::pat_gevComputeLastHessian;}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 483 "patScannerParam.ll"
{return patParserParam::pat_gevEigenvalueThreshold;}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 484 "patScannerParam.ll"
{return patParserParam::pat_gevNonParamPlotRes;}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 485 "patScannerParam.ll"
{return patParserParam::pat_gevNonParamPlotMaxY;}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 486 "patScannerParam.ll"
{return patParserParam::pat_gevNonParamPlotXSizeCm;}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 487 "patScannerParam.ll"
{return patParserParam::pat_gevNonParamPlotYSizeCm;}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 488 "patScannerParam.ll"
{return patParserParam::pat_gevNonParamPlotMinXSizeCm;}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 489 "patScannerParam.ll"
{return patParserParam::pat_gevNonParamPlotMinYSizeCm;}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 490 "patScannerParam.ll"
{return patParserParam::pat_svdMaxIter;}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 491 "patScannerParam.ll"
{return patParserParam::pat_HieLoWSection;}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 492 "patScannerParam.ll"
{return patParserParam::pat_hieMultinomial;}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 493 "patScannerParam.ll"
{return patParserParam::pat_hieTruncStructUtil;}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 494 "patScannerParam.ll"
{return patParserParam::pat_hieUpdateHessien;}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 495 "patScannerParam.ll"
{return patParserParam::pat_hieDateInLog;}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 496 "patScannerParam.ll"
{return patParserParam::pat_LogitKernelFortranSection;}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 497 "patScannerParam.ll"
{return patParserParam::pat_bolducMaxAlts;}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 498 "patScannerParam.ll"
{return patParserParam::pat_bolducMaxFact;}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 499 "patScannerParam.ll"
{return patParserParam::pat_bolducMaxNVar;}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 500 "patScannerParam.ll"
{return patParserParam::pat_NewtonLikeSection;}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 501 "patScannerParam.ll"
{return patParserParam::pat_StepSecondIndividual;}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 502 "patScannerParam.ll"
{return patParserParam::pat_NLgWeight;}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 503 "patScannerParam.ll"
{return patParserParam::pat_NLhWeight;}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 504 "patScannerParam.ll"
{return patParserParam::pat_TointSteihaugSection;}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 505 "patScannerParam.ll"
{return patParserParam::pat_TSFractionGradientRequired;}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 506 "patScannerParam.ll"
{return patParserParam::pat_TSExpTheta;}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 507 "patScannerParam.ll"
{return patParserParam::pat_cfsqpSection;}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 508 "patScannerParam.ll"
{return patParserParam::pat_cfsqpMode;}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 509 "patScannerParam.ll"
{return patParserParam::pat_cfsqpIprint;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 510 "patScannerParam.ll"
{return patParserParam::pat_cfsqpMaxIter;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 511 "patScannerParam.ll"
{return patParserParam::pat_cfsqpEps;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 512 "patScannerParam.ll"
{return patParserParam::pat_cfsqpEpsEqn;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 513 "patScannerParam.ll"
{return patParserParam::pat_cfsqpUdelta;}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 514 "patScannerParam.ll"
{return patParserParam::pat_dfoSection;}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 515 "patScannerParam.ll"
{return patParserParam::pat_dfoAddToLWRK;}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 516 "patScannerParam.ll"
{return patParserParam::pat_dfoAddToLIWRK;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 517 "patScannerParam.ll"
{return patParserParam::pat_dfoMaxFunEval;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 518 "patScannerParam.ll"
{return patParserParam::pat_donlp2Section;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 519 "patScannerParam.ll"
{return patParserParam::pat_donlp2Epsx;}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 520 "patScannerParam.ll"
{return patParserParam::pat_donlp2Delmin;}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 521 "patScannerParam.ll"
{return patParserParam::pat_donlp2Smallw;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 522 "patScannerParam.ll"
{return patParserParam::pat_donlp2Epsdif;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 523 "patScannerParam.ll"
{return patParserParam::pat_donlp2NReset;}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 524 "patScannerParam.ll"
{return patParserParam::pat_solvoptSection;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 525 "patScannerParam.ll"
{return patParserParam::pat_solvoptMaxIter;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 526 "patScannerParam.ll"
{return patParserParam::pat_solvoptDisplay;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 527 "patScannerParam.ll"
{return patParserParam::pat_solvoptErrorArgument;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 528 "patScannerParam.ll"
{return patParserParam::pat_solvoptErrorFunction;}
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 530 "patScannerParam.ll"
{ return patParserParam::patEQUAL; }
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 532 "patScannerParam.ll"
{ return patParserParam::patOB; }
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 533 "patScannerParam.ll"
{ return patParserParam::patCB; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 535 "patScannerParam.ll"
{ return patParserParam::patINT; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 536 "patScannerParam.ll"
{ return patParserParam::patREAL; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 537 "patScannerParam.ll"
{ return patParserParam::patTIME; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 539 "patScannerParam.ll"
{ return patParserParam::patNAME; }
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 540 "patScannerParam.ll"
{ return patParserParam::patSTRING; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 542 "patScannerParam.ll"
{ return patParserParam::patPAIR; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 544 "patScannerParam.ll"
ECHO;
	YY_BREAK
#line 3205 "patScannerParam.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2230 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2230 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2229);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 544 "patScannerParam.ll"



int patFlexParam::yywrap()
{
   return 1;
}

