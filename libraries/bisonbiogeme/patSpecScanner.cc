#line 2 "patSpecScanner.cc"

#line 4 "patSpecScanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyspecFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyspecalloc (yy_size_t  );
void *yyspecrealloc (void *,yy_size_t  );
void yyspecfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int patSpecFlex::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[681] =
    {   0,
        0,    0,  104,  103,    2,   87,  103,    3,  103,   96,
      103,   71,   72,   80,   81,   73,   82,  103,   83,   75,
       75,   75,   74,   90,   85,   92,  103,  103,  103,  103,
      103,  103,  103,  103,   69,   70,   84,  103,  103,  103,
      103,  103,  103,   67,  103,   68,    2,   86,    0,   79,
        3,    0,    0,    0,    0,   42,    0,    0,    0,    0,
       41,    0,    0,   89,   84,    0,   75,   76,    1,    3,
        0,   76,   75,    0,    0,   75,   91,   85,   93,   78,
        0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
       88,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   88,    0,   38,
        0,    0,    0,    0,    0,    0,   43,    0,   39,    0,
        0,    0,    3,  102,   76,    0,    0,    0,    0,   76,
      100,   89,   99,  101,   94,   95,   96,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   49,   44,    0,    0,    0,
       40,    0,    0,    0,   51,    0,   76,    0,    0,   76,

        0,   97,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   48,   45,   46,    0,    0,   76,   77,
       77,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   57,    0,    0,    0,    0,    0,    0,
        0,   53,    0,    0,    9,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   30,    0,    0,    0,    0,
        0,   22,    0,   12,   13,    0,    0,    0,   25,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
        0,    0,    0,    0,   47,    0,    0,    0,    0,    0,
        0,    0,    6,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   29,    0,    0,    0,    0,    8,
        0,    0,    0,    0,   10,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,   16,   65,    0,
        0,    0,   26,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   50,   52,    0,    0,   27,   28,
        0,    0,    4,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   11,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    7,
        0,    0,    0,    0,    0,   17,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   15,    0,    0,
        0,    0,    0,    0,   19,    0,    0,   21,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   60,    0,    0,    0,
        0,    0,   58,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   56,
       63,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   59,   32,    0,

        0,    0,    0,    0,    0,    0,   34,   33,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    5,
        0,    0,    0,    0,   61,    0,    0,    0,    0,    0,
       35,    0,    0,    0,    0,   31,    0,   62,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       66,    0,    0,   18,    0,    0,   20,   55,    0,    0,
        0,    0,    0,    0,   64,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   36,    0,    0,   37,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   19,
       20,   21,   21,   22,   22,   22,   22,   23,   24,   25,
       26,   27,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   35,   35,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   35,   50,
       51,    1,   52,   53,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   35,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[83] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    1,    2,    2,    2,
        2,    2,    1,    1,    1,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1
    } ;

static yyconst flex_int16_t yy_base[685] =
    {   0,
        0,    0,  998,  999,   81,  971,  991,    0,   57,  999,
      986,  999,  999,  982,   90,  999,   97,  102,   90,  110,
      125,  140,  999,   64,  967,  966,  135,   90,  132,   97,
      147,  149,  151,  163,  178,  999,  999,  173,  165,  168,
      176,  190,  180,  999,  910,  999,  199,  999,  985,  999,
        0,  959,  947,  151,  955,  999,  946,  946,  163,  947,
      999,  947,  954,  999,  999,  212,  241,  219,  999,    0,
      246,  261,  269,  276,  289,  297,  999,  999,  999,  999,
      193,  303,  244,  319,  269,  246,  252,  274,  322,  324,
      267,  328,  920,  145,  295,  277,  903,  274,  943,  125,

      284,  300,  907,  156,  197,  307,  904,  917,  913,  340,
      347,  351,  367,  370,  372,  374,  377,  999,  932,  999,
      936,  935,  928,  930,  932,  936,  999,  928,  999,  932,
      928,  368,    0,  373,  378,  400,  383,  941,  422,  431,
      382,  405,  423,  427,  431,  433,  443,  452,  902,  889,
      884,  923,  891,  891,  884,  885,  883,  899,  882,   70,
      885,  877,  882,  921,  386,  881,  875,  888,  893,  905,
      870,  875,  883,  232,  872,  866,  877,  896,  870,  880,
      869,  870,  869,  872,  454,  999,  999,  884,  893,  887,
      999,  880,  894,  887,  999,  442,  447,  457,  462,  467,

      472,  471,  853,  868,  907,   75,  858,  848,  864,  855,
      860,  840,  860,  849,  842,  853,  842,  836,  864,  849,
      848,  847,  833,  845,  999,  844,  826,  864,  837,  840,
      843,  841,  833,  824,  842,  824,  827,  832,  825,  828,
      821,  849,  839,  999,  999,  999,  857,  480,  485,  490,
      999,  825,  831,  337,  817,  822,  823,  806,  845,  802,
      805,  803,  801,  799,  813,  800,  805,  800,  809,  818,
      789,  810,  836,  798,  790,  793,  797,  792,  793,  791,
      801,  787,  795,  999,  788,  793,  794,  787,  787,  787,
      808,  999,  792,  784,  999,  776,  769,  773,  769,  781,

      165,  776,  783,  778,  784,  772,  776,  761,  777,  763,
      778,  757,  776,  775,  755,  752,  313,  751,  752,  755,
      766,  789,  760,  774,  745,  744,  756,  762,  740,  739,
      738,  777,  765,  467,  753,  730,  742,  743,  731,  751,
      735,  746,  735,  726,  725,  999,  729,  737,  723,  729,
      720,  999,  719,  999,  999,  761,  740,  730,  999,  716,
      723,  727,  720,  729,  710,  709,  729,  708,  747,  999,
      715,  714,  724,  707,  999,  744,  745,  699,  719,  711,
      714,  696,  999,  694,  703,  706,  701,  704,  695,  709,
      697,  696,  706,  705,  688,  696,  682,  701,  718,  696,

      713,  676,  689,  692,  999,  683,  678,  676,  684,  999,
      670,  699,  703,  680,  999,  660,  685,  684,  694,  667,
      681,  657,  700,  692,  999,  661,  649,  999,  999,  660,
      655,  668,  999,  692,  652,  654,  666,  649,  652,  650,
      643,  649,  643,  653,  999,  999,  390,  661,  999,  999,
      641,  638,  999,  651,  646,  640,  640,  647,  633,  636,
      632,  655,  481,  640,  648,  669,  640,  630,  630,  666,
      642,  634,  637,  632,  999,  622,  650,  616,  615,  628,
      613,  626,  610,  630,  618,  372,  610,  612,  615,  999,
      609,  621,  637,  622,  610,  999,  601,  599,  607,  611,

      609,  615,  593,  606,  612,  483,  592,  999,  593,  598,
      592,  585,  599,  584,  581,  584,  586,  999,  598,  597,
      578,  589,  575,  576,  999,  576,  581,  999,  568,  571,
      588,  569,  574,  582,  584,  568,  585,  581,  577,  576,
      561,  558,  579,  568,  572,  555,  564,  592,  552,  561,
      560,  559,  557,  561,  554,  544,  999,  546,  584,  556,
      562,  561,  999,  539,  538,  580,  553,  553,  536,  541,
      538,  536,  531,  530,  538,  545,  536,  527,  532,  999,
      999,  544,  543,  526,  519,  526,  532,  527,  516,  521,
      535,  534,  512,  519,  528,  511,  509,  999,  999,  521,

      506,  512,  511,  503,  503,  522,  999,  999,  495,  509,
      504,  502,  517,  508,  504,  511,  506,  501,  511,  999,
      532,  488,  503,  488,  999,  506,  489,  504,  508,  495,
      999,  485,  474,  492,  478,  999,  482,  999,  493,  475,
      479,  515,  472,  491,  470,  476,  488,  467,  460,  474,
      999,  473,  450,  999,  450,  455,  999,  999,  462,  449,
      447,  466,  461,  423,  999,  408,  387,  356,  362,  341,
      315,  266,  268,  222,  152,  999,  126,  121,  999,  999,
      529,  532,  533,  536
    } ;

static yyconst flex_int16_t yy_def[685] =
    {   0,
      680,    1,  680,  680,  680,  680,  681,  682,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  683,  683,  683,  683,
      683,  683,  683,  683,  680,  680,  680,  683,  683,  683,
      683,  683,  683,  680,  680,  680,  680,  680,  681,  680,
      682,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  684,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      683,  683,  683,  683,  683,  683,  683,  683,  683,  683,
      683,  683,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  683,
      683,  683,  683,  683,  683,  683,  683,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  684,  680,  680,  680,  680,  680,  680,  680,
      683,  683,  683,  683,  683,  683,  683,  683,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  683,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  683,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,    0,
      680,  680,  680,  680
    } ;

static yyconst flex_int16_t yy_nxt[1082] =
    {   0,
        4,    5,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   23,    5,   24,   25,   26,   27,   28,   28,
       28,   29,   28,   28,   28,   30,   31,   32,   28,   33,
       28,   28,   28,   34,   28,   28,   28,   28,   28,   28,
       35,   36,   37,   28,   38,   28,   28,   28,   39,   28,
       28,   28,   40,   28,   41,   42,   28,   28,   28,   28,
       28,   43,   28,   28,   28,   28,   28,   28,   28,   44,
       45,   46,   47,   47,   52,   53,   54,   55,   56,   77,
       48,   80,   80,   57,   58,   59,   60,   61,   80,   80,

       62,   69,  255,   63,   47,   66,   70,   67,   67,   67,
       67,   67,   66,  256,   67,   67,   67,   67,   67,   68,
       68,   68,   68,   68,   71,   72,  214,   73,   73,   73,
       73,   73,   74,   80,   80,   85,   80,   80,  215,   71,
       72,   75,   73,   73,   73,   76,   76,   74,   80,   80,
       80,   80,   80,   80,   71,   72,   75,   76,   76,   76,
       76,   76,   74,   82,   80,   80,   80,   80,   75,   80,
       80,   75,  679,   83,   80,   80,   88,   80,   80,  165,
       84,   80,   80,   75,   89,   86,   87,  166,   90,  121,
      122,   80,   80,   91,   80,   80,  126,  678,   75,  127,

       47,   47,  128,  150,   92,   93,   94,   95,   96,   97,
      174,   98,  151,   99,  100,  101,  102,  103,  104,  341,
      105,  106,   47,  107,  677,  108,  175,  109,  110,   68,
       68,   68,   68,   68,  112,  342,   68,   68,   68,   68,
       68,  111,   86,  113,  114,   80,   80,   80,   80,  117,
      132,  176,  115,   80,   80,  177,   72,  116,   67,   67,
       67,   67,   67,  134,  134,  134,  134,  134,   80,   80,
       80,   80,   75,  676,  142,   80,   80,  132,  135,  135,
      135,  135,  135,   71,   72,   86,   76,   76,   76,   76,
       76,   74,  136,  137,  137,  137,  137,  138,  230,   75,

       75,  139,  231,  139,   80,   80,  140,  140,  140,  140,
      140,   71,   72,  144,   76,   76,   76,   76,   76,  136,
       80,   80,  145,   80,   80,   80,   80,   75,   75,   80,
       80,  155,  161,  152,  675,  156,  170,  674,  167,  157,
      162,   80,   80,  358,  163,  178,  141,  158,   80,   80,
      159,  168,   80,   80,  147,   75,  153,  169,  171,  143,
      146,  179,  154,  180,  359,  181,  296,  172,   80,   80,
      148,   80,   80,   80,   80,   80,   80,  673,   80,   80,
      196,  297,  196,   80,   80,  197,  197,  197,  197,  197,
      134,  134,  134,  134,  134,  135,  135,  135,  135,  135,

      138,  138,  138,  138,  138,  201,   80,   80,  510,  198,
      511,  141,  199,  672,  199,  143,  671,  200,  200,  200,
      200,  200,  670,  144,   80,   80,  473,   86,   80,   80,
      220,  147,   80,   80,   80,   80,  198,  474,  146,  140,
      140,  140,  140,  140,   80,   80,  145,  185,  140,  140,
      140,  140,  140,   80,   80,   80,   80,  669,  221,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  248,
      668,  248,   80,   80,  249,  249,  249,  249,  249,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  250,
      250,  250,  250,  251,  376,  667,  202,  249,  249,  249,

      249,  249,  249,  249,  249,  249,  249,  251,  251,  251,
      251,  251,  487,  377,  529,  666,  488,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  202,  656,  530,   49,
       49,   49,   51,   51,   81,   81,  133,  133,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  605,  604,
      603,  602,  601,  600,  599,  598,  597,  596,  595,  594,

      593,  592,  591,  590,  589,  588,  587,  586,  585,  584,
      583,  582,  581,  580,  579,  578,  577,  576,  575,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  528,  527,  526,  525,  524,  523,  522,
      521,  520,  519,  518,  517,  516,  515,  514,  513,  512,
      509,  508,  507,  506,  505,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,

      489,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  476,  475,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,

      385,  384,  383,  382,  381,  380,  379,  378,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  357,  356,  355,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,

      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  254,  253,  252,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  232,
      229,  228,  227,  226,  225,  224,  223,  222,  219,  218,
      217,  216,  213,  212,  211,  210,  209,  208,  207,  206,
      205,  204,  203,  201,  195,  194,  193,  192,  191,  190,
      189,  188,  187,  186,  184,  183,  182,  173,  164,  160,
      149,  131,  130,  129,  125,  124,  123,  120,  119,   50,
      118,   79,   78,   65,   64,   50,   48,  680,    3,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680
    } ;

static yyconst flex_int16_t yy_chk[1082] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    9,    9,    9,    9,    9,   24,
       24,   28,   28,    9,    9,    9,    9,    9,   30,   30,

        9,   19,  206,    9,    5,   15,   19,   15,   15,   15,
       15,   15,   17,  206,   17,   17,   17,   17,   17,   18,
       18,   18,   18,   18,   20,   20,  160,   20,   20,   20,
       20,   20,   20,   29,   29,   30,   27,   27,  160,   21,
       21,   20,   21,   21,   21,   21,   21,   21,   31,   31,
       32,   32,   33,   33,   22,   22,   21,   22,   22,   22,
       22,   22,   22,   27,   34,   34,   39,   39,   20,   40,
       40,   22,  678,   27,   38,   38,   32,   41,   41,  100,
       29,   43,   43,   21,   32,   31,   31,  100,   32,   54,
       54,   42,   42,   33,   81,   81,   59,  677,   22,   59,

       47,   47,   59,   94,   34,   35,   35,   35,   35,   35,
      104,   35,   94,   35,   35,   35,   35,   35,   35,  301,
       35,   35,   47,   35,  675,   35,  104,   35,   38,   66,
       66,   66,   66,   66,   40,  301,   68,   68,   68,   68,
       68,   39,   41,   41,   42,   83,   83,   86,   86,   43,
       68,  105,   42,   87,   87,  105,   67,   42,   67,   67,
       67,   67,   67,   71,   71,   71,   71,   71,   91,   91,
       85,   85,   67,  674,   83,   88,   88,   68,   72,   72,
       72,   72,   72,   73,   73,   87,   73,   73,   73,   73,
       73,   73,   72,   74,   74,   74,   74,   74,  174,   67,

       73,   75,  174,   75,   82,   82,   75,   75,   75,   75,
       75,   76,   76,   85,   76,   76,   76,   76,   76,   72,
       84,   84,   88,   89,   89,   90,   90,   73,   76,   92,
       92,   96,   98,   95,  673,   96,  102,  672,  101,   96,
       98,  110,  110,  317,   98,  106,   82,   96,  111,  111,
       96,  101,  112,  112,   90,   76,   95,  101,  102,   84,
       89,  106,   95,  106,  317,  106,  254,  102,  113,  113,
       92,  114,  114,  115,  115,  116,  116,  671,  117,  117,
      132,  254,  132,  141,  141,  132,  132,  132,  132,  132,
      134,  134,  134,  134,  134,  135,  135,  135,  135,  135,

      137,  137,  137,  137,  137,  137,  142,  142,  486,  135,
      486,  110,  136,  670,  136,  111,  669,  136,  136,  136,
      136,  136,  668,  112,  143,  143,  447,  113,  144,  144,
      165,  116,  145,  145,  146,  146,  135,  447,  115,  139,
      139,  139,  139,  139,  147,  147,  114,  117,  140,  140,
      140,  140,  140,  148,  148,  185,  185,  667,  165,  196,
      196,  196,  196,  196,  197,  197,  197,  197,  197,  198,
      666,  198,  202,  202,  198,  198,  198,  198,  198,  199,
      199,  199,  199,  199,  200,  200,  200,  200,  200,  201,
      201,  201,  201,  201,  334,  664,  148,  248,  248,  248,

      248,  248,  249,  249,  249,  249,  249,  250,  250,  250,
      250,  250,  463,  334,  506,  663,  463,  662,  661,  660,
      659,  656,  655,  653,  652,  650,  185,  649,  506,  681,
      681,  681,  682,  682,  683,  683,  684,  684,  648,  647,
      646,  645,  644,  643,  642,  641,  640,  639,  637,  635,
      634,  633,  632,  630,  629,  628,  627,  626,  624,  623,
      622,  621,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  606,  605,  604,  603,  602,  601,  600,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  579,  578,  577,  576,

      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  562,  561,  560,  559,  558,  556,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  527,  526,  524,  523,  522,
      521,  520,  519,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  507,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  495,  494,  493,  492,  491,  489,  488,  487,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,

      464,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      452,  451,  448,  444,  443,  442,  441,  440,  439,  438,
      437,  436,  435,  434,  432,  431,  430,  427,  426,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  414,  413,
      412,  411,  409,  408,  407,  406,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  382,  381,  380,
      379,  378,  377,  376,  374,  373,  372,  371,  369,  368,
      367,  366,  365,  364,  363,  362,  361,  360,  358,  357,
      356,  353,  351,  350,  349,  348,  347,  345,  344,  343,

      342,  341,  340,  339,  338,  337,  336,  335,  333,  332,
      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  300,
      299,  298,  297,  296,  294,  293,  291,  290,  289,  288,
      287,  286,  285,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  253,  252,  247,  243,  242,  241,  240,  239,
      238,  237,  236,  235,  234,  233,  232,  231,  230,  229,

      228,  227,  226,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      207,  205,  204,  203,  194,  193,  192,  190,  189,  188,
      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      173,  172,  171,  170,  169,  168,  167,  166,  164,  163,
      162,  161,  159,  158,  157,  156,  155,  154,  153,  152,
      151,  150,  149,  138,  131,  130,  128,  126,  125,  124,
      123,  122,  121,  119,  109,  108,  107,  103,   99,   97,
       93,   63,   62,   60,   58,   57,   55,   53,   52,   49,
       45,   26,   25,   14,   11,    7,    6,    3,  680,  680,

      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[104] =
    {   0,
0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "patSpecScanner.ll"
/*-*-c++-*------------------------------------------------------------
//
// File name : patSpecScanner.l
// Michel Bierlaire, EPFL
// Date :      Tue Nov  7 14:22:36 2000
//
//--------------------------------------------------------------------
*/
#line 15 "patSpecScanner.ll"

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#include "patSpecParser.hh"
#include <string>
#define YY_BREAK

//STR	["]([^"^\n^\r]*)[\n"]
#line 922 "patSpecScanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 161 "patSpecScanner.ll"


#line 1025 "patSpecScanner.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 681 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 999 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 163 "patSpecScanner.ll"
{	/* skip comments */
  int c;
  while ( (c = yyinput()) != 0 ) {
    if ( c == '*' ) {
      if ( (c = yyinput()) == '/' ) break;
      else unput( c );
    }
  }
  break;
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 174 "patSpecScanner.ll"
{ break; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 175 "patSpecScanner.ll"
{ break; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 178 "patSpecScanner.ll"
{return patSpecParser::pat_gevDataFile ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 179 "patSpecScanner.ll"
{return patSpecParser::pat_gevModelDescription ;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 180 "patSpecScanner.ll"
{return patSpecParser::pat_gevChoice ;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 181 "patSpecScanner.ll"
{return patSpecParser::pat_gevPanel ;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 182 "patSpecScanner.ll"
{return patSpecParser::pat_gevWeight ;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 183 "patSpecScanner.ll"
{return patSpecParser::pat_gevBeta ;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 184 "patSpecScanner.ll"
{return patSpecParser::pat_gevBoxCox ;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 185 "patSpecScanner.ll"
{return patSpecParser::pat_gevBoxTukey ;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 186 "patSpecScanner.ll"
{return patSpecParser::pat_gevLatex1 ;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 187 "patSpecScanner.ll"
{return patSpecParser::pat_gevLatex2 ;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 188 "patSpecScanner.ll"
{return patSpecParser::pat_gevMu ;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 189 "patSpecScanner.ll"
{return patSpecParser::pat_gevSampleEnum ;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 190 "patSpecScanner.ll"
{return patSpecParser::pat_gevGnuplot ;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 191 "patSpecScanner.ll"
{return patSpecParser::pat_gevUtilities ;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 192 "patSpecScanner.ll"
{return patSpecParser::pat_gevGeneralizedUtilities ;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 193 "patSpecScanner.ll"
{return patSpecParser::pat_gevDerivatives ;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 194 "patSpecScanner.ll"
{return patSpecParser::pat_gevParameterCovariances ;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 195 "patSpecScanner.ll"
{return patSpecParser::pat_gevExpr ;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 196 "patSpecScanner.ll"
{return patSpecParser::pat_gevGroup ;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 197 "patSpecScanner.ll"
{return patSpecParser::pat_gevExclude ;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 198 "patSpecScanner.ll"
{return patSpecParser::pat_gevScale ;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 199 "patSpecScanner.ll"
{ return patSpecParser::pat_gevModel ;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 200 "patSpecScanner.ll"
{return patSpecParser::pat_gevNLNests ;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 201 "patSpecScanner.ll"
{return patSpecParser::pat_gevCNLAlpha ;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 202 "patSpecScanner.ll"
{return patSpecParser::pat_gevCNLNests ;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 203 "patSpecScanner.ll"
{return patSpecParser::pat_gevRatios ;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 204 "patSpecScanner.ll"
{return patSpecParser::pat_gevDraws ;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 205 "patSpecScanner.ll"
{return patSpecParser::pat_gevConstraintNestCoef ;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 206 "patSpecScanner.ll"
{return patSpecParser::pat_gevConstantProduct ; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 207 "patSpecScanner.ll"
{return patSpecParser::pat_gevNetworkGEVNodes ; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 208 "patSpecScanner.ll"
{return patSpecParser::pat_gevNetworkGEVLinks ; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 209 "patSpecScanner.ll"
{return patSpecParser::pat_gevLinearConstraints ;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 210 "patSpecScanner.ll"
{return patSpecParser::pat_gevNonLinearEqualityConstraints ;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 211 "patSpecScanner.ll"
{return patSpecParser::pat_gevNonLinearInequalityConstraints ;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 212 "patSpecScanner.ll"
{return patSpecParser::pat_gevBP ;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 213 "patSpecScanner.ll"
{return patSpecParser::pat_gevOL ;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 214 "patSpecScanner.ll"
{return patSpecParser::pat_gevMNL ;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 215 "patSpecScanner.ll"
{return patSpecParser::pat_gevP ;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 216 "patSpecScanner.ll"
{return patSpecParser::pat_gevE ;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 217 "patSpecScanner.ll"
{ return patSpecParser::pat_gevNL; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 218 "patSpecScanner.ll"
{return patSpecParser::pat_gevCNL ;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 219 "patSpecScanner.ll"
{return patSpecParser::pat_gevNGEV ;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 220 "patSpecScanner.ll"
{return patSpecParser::pat_gevNONE ;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 221 "patSpecScanner.ll"
{return patSpecParser::pat_gevCOLUMNS ;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 222 "patSpecScanner.ll"
{return patSpecParser::pat_gevLOOP ;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 223 "patSpecScanner.ll"
{return patSpecParser::pat_gevACQ ;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 224 "patSpecScanner.ll"
{return patSpecParser::pat_gevSIGMA_ACQ ;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 225 "patSpecScanner.ll"
{return patSpecParser::pat_gevVAL ;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 226 "patSpecScanner.ll"
{return patSpecParser::pat_gevSIGMA_VAL ;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 227 "patSpecScanner.ll"
{return patSpecParser::pat_gevDERIV ;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 228 "patSpecScanner.ll"
{return patSpecParser::pat_gevMassAtZero ;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 229 "patSpecScanner.ll"
{return patSpecParser::pat_gevDiscreteDistributions ;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 230 "patSpecScanner.ll"
{return patSpecParser::pat_gevSelectionBias ;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 231 "patSpecScanner.ll"
{return patSpecParser::pat_gevSNP ;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 232 "patSpecScanner.ll"
{return patSpecParser::pat_gevAggregateLast ;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 233 "patSpecScanner.ll"
{return patSpecParser::pat_gevAggregateWeight ;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 234 "patSpecScanner.ll"
{return patSpecParser::pat_gevOrdinalLogit ;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 235 "patSpecScanner.ll"
{return patSpecParser::pat_gevRegressionModels ;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 236 "patSpecScanner.ll"
{return patSpecParser::pat_gevDurationModel ;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 237 "patSpecScanner.ll"
{return patSpecParser::pat_gevZhengFosgerau ;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 238 "patSpecScanner.ll"
{return patSpecParser::pat_gevGeneralizedExtremeValue ;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 239 "patSpecScanner.ll"
{return patSpecParser::pat_gevIIATest ;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 240 "patSpecScanner.ll"
{return patSpecParser::pat_gevProbaStandardErrors ;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 242 "patSpecScanner.ll"
{return patSpecParser::patOPCUR ;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 243 "patSpecScanner.ll"
{return patSpecParser::patCLCUR ;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 244 "patSpecScanner.ll"
{return patSpecParser::patOPBRA ;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 245 "patSpecScanner.ll"
{return patSpecParser::patCLBRA ;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 246 "patSpecScanner.ll"
{return patSpecParser::patOPPAR ;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 247 "patSpecScanner.ll"
{return patSpecParser::patCLPAR ;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 248 "patSpecScanner.ll"
{return patSpecParser::patCOMMA ;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 249 "patSpecScanner.ll"
{return patSpecParser::patCOLON ;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 251 "patSpecScanner.ll"
{ return patSpecParser::patINTEGER; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 252 "patSpecScanner.ll"
{ return patSpecParser::patREAL; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 253 "patSpecScanner.ll"
{ return patSpecParser::patTIME; }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 255 "patSpecScanner.ll"
{ return patSpecParser::patNAME; }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 256 "patSpecScanner.ll"
{ return patSpecParser::patSTRING; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 258 "patSpecScanner.ll"
{ return patSpecParser::patMULT;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 259 "patSpecScanner.ll"
{ return patSpecParser::patPLUS;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 260 "patSpecScanner.ll"
{ return patSpecParser::patMINUS;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 261 "patSpecScanner.ll"
{ return patSpecParser::patDIVIDE;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 262 "patSpecScanner.ll"
{ return patSpecParser::patPOWER;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 263 "patSpecScanner.ll"
{ return patSpecParser::patEQUAL;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 264 "patSpecScanner.ll"
{ return patSpecParser::patNOTEQUAL;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 265 "patSpecScanner.ll"
{ return patSpecParser::patNOT;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 266 "patSpecScanner.ll"
{ return patSpecParser::patOR;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 267 "patSpecScanner.ll"
{ return patSpecParser::patAND;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 268 "patSpecScanner.ll"
{ return patSpecParser::patLESS;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 269 "patSpecScanner.ll"
{ return patSpecParser::patLESSEQUAL;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 270 "patSpecScanner.ll"
{ return patSpecParser::patGREAT;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 271 "patSpecScanner.ll"
{ return patSpecParser::patGREATEQUAL;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 272 "patSpecScanner.ll"
{ return patSpecParser::patMAX;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 273 "patSpecScanner.ll"
{ return patSpecParser::patMIN;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 274 "patSpecScanner.ll"
{ return patSpecParser::patMOD;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 275 "patSpecScanner.ll"
{ return patSpecParser::patSQRT;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 276 "patSpecScanner.ll"
{ return patSpecParser::patLOG;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 277 "patSpecScanner.ll"
{ return patSpecParser::patEXP;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 278 "patSpecScanner.ll"
{ return patSpecParser::patABS;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 279 "patSpecScanner.ll"
{ return patSpecParser::patINT;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 282 "patSpecScanner.ll"
{ return patSpecParser::patPAIR; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 284 "patSpecScanner.ll"
ECHO;
	YY_BREAK
#line 1645 "patSpecScanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyspecfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyspecfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyspecrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyspecrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 681 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 681 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 680);

		return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyspecalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyspecalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyspecfree((void *) b->yy_ch_buf  );

	yyspecfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyspecalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyspecrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyspecalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyspecrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyspecalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyspecrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyspecfree (void * ptr )
{
	free( (char *) ptr );	/* see yyspecrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 284 "patSpecScanner.ll"




int patSpecFlex::yywrap()
{
   return 1;
}

